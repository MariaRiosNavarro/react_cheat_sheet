export const reactArray = [
  // -------------------------------------------------------1 basics
  {
    _id: 1,
    link: "basics",
    title: "Basics",
    intro:
      "React is a JavaScript library: write simpler (declarative) code describing what the user interface should look like. React handles the DOM under the hood. To write declarative code for React, you use JSX. In imperative programming, your code performs a series of actions. In declarative programming, your code describes a desired outcome.",
    moreIntro:
      "JSX is a syntax extension to JavaScript. JSX is neither a string, nor HTML as we know it. JSX expressions can be used anywhere a JavaScript expression can be used.",
    codeA: "const element = <p>Some Text</p>;",
    codeB: "",
    codeC: "",
    subtitle: "Creating Elements and Components",
    subIntro:
      "Just like in HTML, JSX elements are described using opening and closing tags.The closing tag contains the same tag name or the same component type as the opening tag does and nothing else. The children of the element are placed between the opening and closing tag. If the element has no children, the closing tag can be omitted and the element is self-closing.",
    moreSubIntro: "",
    codeSubA: 'const element = <p className="text">Some Text</p>;',
    codeSubA_extra_code1: 'const input = <input type="text" />',
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: "",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: "",
    codeSubA_extra_code6: "",
    codeSubA_extra_code7: "",
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      'Elements that do not support closing tags in HTML like <br> or <input> must be self-closing in JSX (like <br /> or <input type="text" />).',
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB:
      "To create an element from a component, we can simply refer to it by the function name in JSX and treat it just like any built-in component:",
    codeTextBA: "const element = <MyComponent />;",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBC: "",
    subtitle_A: "Attributes",
    subIntro_A:
      "Attributes for built-in HTML elements use JavaScript-centric names from the DOM API. In most cases the names are the same as in HTML, but there are some exceptions. For example, the class attribute from HTML is called className in JSX.",
    moreSubIntro_A:
      "Passing string values to attributes is done by using double quotes. To pass any JavaScript expression use curly braces.",
    codeSubA_A: 'const element = <p className="text">Some Text</p>;',
    codeSubA_A_extra_code1: 'const myValue = "This is a string";',
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9:
      'const input = <input type="text" value={myValue} minLength={5} />;',
    codeSubA_A_extra_code10: "",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "React elements can be nested the same way we have been nesting our HTML elements",
    codeTextAA_A: "const element = (",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: " <div>",
    codeTextAA_A_extra_code3: "  <p>Some Text<p>",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "  <p>Some more Text</p>",
    codeTextAA_A_extra_code6: " </div>",
    codeTextAA_A_extra_code7: ");",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_Aextra_code1: "",
    codeTextAC_Aextra_code2: "",
    codeTextAC_Aextra_code3: "",
    codeTextAC_Aextra_code4: "",
    codeTextAC_Aextra_code5: "",
    codeTextAC_Aextra_code6: "",
    codeTextAC_Aextra_code7: "",
    codeTextAC_Aextra_code8: "",
    codeTextAC_Aextra_code9: "",
    codeTextAC_Aextra_code10: "",
    textB_A:
      "Interpolating Expressions: We can use any JavaScript expression inside JSX by wrapping it in curly braces. This is called interpolation. It is similar to string interpolation in JavaScript template strings.",
    codeTextBA_A: "const name = 'Patricia';",
    codeTextBA_A_extra_code1: "const element = <p>My cat's name is {name}</p>;",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "const a = 5; ",
    codeTextBB_A_extra_code1: "const b = 10;",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "const element = (<p> {a} + {b} = {a + b} </p>);",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "React Components",
    subIntro_B:
      "React applications are built using components. A component is an independent and reusable piece of the user interface that contains its own structure, logic, and potentially styling. React components are JavaScript functions that return React elements. Those elements are then turned into DOM elements by React during the rendering process.",
    moreSubIntro_B:
      "In order to create a React component, we write a named function (using PascalCase) and have it return the desired elements using JSX.",
    codeSubA_B: "function MyButton() { ",
    codeSubA_B_extra_code1: "  return (",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3:
      '    <button type="button" className="default-button"> I am a button </button>',
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "  );",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "}",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B:
      "This is a very powerful concept, because it allows us to reuse the same component in multiple places in our application.",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B:
      "HOW REACT Renders: React needs to know where to render the elements it creates. We select the DOM element we want to render into by using document.querySelector(). We then create a React root object. The root object has a render() method that we can use to render React elements into the DOM. React only updates the DOM elements that have changed compared to the last render. This is very efficient and provides a great user experience (focus stays consistent, inputs keep their values, etc.) as well as a great developer experience (declaritive code is much easier to reason about).",
    codeTextBA_B: "//HTML",
    codeTextBA_B_extra_code1: '<div id="root"></div>',
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "//JS",
    codeTextBB_B_extra_code1:
      'const rootElement = document.querySelector("#root");',
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "const root = ReactDOM.createRoot(rootElement);",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "root.render(<h1>Hello, world</h1>);",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
  },
  // -------------------------------------------------------2 props
  {
    _id: 2,
    link: "props",
    title: "Props",
    intro:
      "Using Props: Props is short for properties. They are a way to pass data to a child component. A component receives a props object as the first function parameter.",
    moreIntro:
      "Props are passed to a component as attributes. For convenience the props object is often destructured in the function parameter. You can choose any names for your props. 💡 There are some naming conventions though. Boolean props are often prefixed with is, has or should. For example isDisabled, hasError or shouldShow. Props that take functions are often prefixed with on. For example onClick, onSubmit or onHover. Following these conventions makes it easier to understand the purpose of the prop. Props can be of any type (string, number, array, object, function, ...) You should treat the props object as immutable and read-only.",
    codeA: "function UserCard(props) {",
    codeA_extra_code1: " return <div>{props.name}</div>;",
    codeA_extra_code2: "",
    codeA_extra_code3: "}",
    codeA_extra_code4: "",
    codeA_extra_code5: "",
    codeA_extra_code6: "",
    codeA_extra_code7: "",
    codeA_extra_code8: "",
    codeA_extra_code9: "",
    codeA_extra_code10: "",
    codeB: "function UserCard({ name }) {",
    codeB_extra_code1: " return <div>{name}</div>;",
    codeB_extra_code2: "",
    codeB_extra_code3: "}",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Passing Props to a Component",
    subIntro:
      "Props are passed to a component as attributes. You can pass any type of data as a prop. String props can be passed using double quotes. All other props must be passed using curly braces.",
    moreSubIntro: "",
    codeSubA: "<UserCard",
    codeSubA_extra_code1: ' name="Alex"',
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: " isFavorite={true}",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: ' favoriteFoods={["Pasta", "Salad"]}',
    codeSubA_extra_code6: "",
    codeSubA_extra_code7:
      ' contactDetails={{ email: "alex@doe.de", phone: "123456789" }} contactDetails={{ email: "alex@doe.de", phone: "123456789" }}',
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "/>",
    codeSubA_extra_code10: "",
    codeSubA_extra_code11: "",
    codeSubA_extra_code12: "",
    codeSubA_extra_code13: "",
    codeSubA_extra_code14: "",
    codeSubA_extra_code15: "",
    codeSubA_extra_code16: "",
    codeSubA_extra_code17: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "Notice the double curly braces for the object. This is because the outer curly braces are used to signify a JavaScript expression. The inner curly braces are used to define an object. There is a shorthand syntax for boolean props. If the value should be true you can omit the value.Omitting any attribute will result in the value undefined for that prop.",
    codeTextAA: "<UserCard isFavorite />",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Conditional Rendering",
    subIntro_A:
      "You can use props to conditionally render parts of a component.",
    moreSubIntro_A: "",
    codeSubA_A: "function UserCard({ name, isFavorite }) {",
    codeSubA_A_extra_code1: " return (",
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "   <div>",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "     {name}",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "",
    codeSubA_A_extra_code10: "     {isFavorite ? <span>🌟</span> : null}",
    codeSubA_A_extra_code11: "   </div>",
    codeSubA_A_extra_code12: "",
    codeSubA_A_extra_code13: " );",
    codeSubA_A_extra_code14: "",
    codeSubA_A_extra_code15: "}",
    codeSubA_A_extra_code16: "// In JSX null is a way to render nothing.",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "You can not use an if statement within JSX because only expressions are allowed. You can use an if statement outside of the JSX though.",
    codeTextAA_A: "function UserCard({ name, isFavorite }) {",
    codeTextAA_A_extra_code1: "  let favoriteStar = null;",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "  if (isFavorite) {",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "   favoriteStar = <span>🌟</span>;",
    codeTextAA_A_extra_code10: "",
    codeTextAA_A_extra_code11: "  }",
    codeTextAA_A_extra_code12: "",
    codeTextAA_A_extra_code13: " return (",
    codeTextAA_A_extra_code14: "  <div>{name}{favoriteStar}</div>",
    codeTextAA_A_extra_code15: "",
    codeTextAA_A_extra_code16: "",
    codeTextAA_A_extra_code17: " );",
    codeTextAA_A_extra_code18: "",
    codeTextAA_A_extra_code19: "}",
    codeTextAA_A_extra_code20: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A:
      "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Passing props to a Component in the React Docs.",
      "https://react.dev/learn/passing-props-to-a-component",
    ],
    externalLinksB: [
      "Conditional Rendering",
      "https://react.dev/learn/conditional-rendering",
    ],
    externalLinksC: ["", ""],
    externalLinksD: ["", ""],
  },
  // -------------------------------------------------------3 Nesting
  {
    _id: 3,
    link: "nesting",
    title: "Nesting",
    intro: "Passing JSX as Props:",
    moreIntro:
      "Elements created by JSX are just objects. They can be passed around like any other object: for example, as props.",
    codeA: "function UserCard({ avatar }) {",
    codeA_extra_code1: ' return <div className="card">{avatar}</div>;',
    codeA_extra_code2: "",
    codeA_extra_code3: "}",
    codeA_extra_code4: "",
    codeA_extra_code5: "",
    codeA_extra_code6: "",
    codeA_extra_code7: "",
    codeA_extra_code8: "",
    codeA_extra_code9: "",
    codeA_extra_code10: "",
    codeB: "function App() {",
    codeB_extra_code1: " return <UserCard avatar={<Avatar />} />;",
    codeB_extra_code2: "",
    codeB_extra_code3: "}",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "The children Prop",
    subIntro:
      "We are already familiar with nesting built-in browser tags. Oftentimes you'd want your own components to be nestable as well.",
    moreSubIntro:
      "If you nest a component inside of another component, the nested component is passed as a prop to the parent component. This special prop is called children.",
    codeSubA: "function UserCard({ children }) {",
    codeSubA_extra_code1: ' return <div className="card">{children}</div>;',
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: "}",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: "",
    codeSubA_extra_code6: "",
    codeSubA_extra_code7: "",
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "This component will render the nested element(s) as a child of the div element. The nested element(s) can be a single element, multiple elements, or even a string or number.",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Fragments",
    subIntro_A:
      "Sometimes you want to return multiple elements from a component function without wrapping them in a div or other element. You can use a Fragment (<></> or <Fragment></Fragment>) for this.",
    moreSubIntro_A:
      "This is necessary because React components can only return a single element from a component function.",
    codeSubA_A: "function UserList() {",
    codeSubA_A_extra_code1: " return (",
    codeSubA_A_extra_code2: "  <>",
    codeSubA_A_extra_code3: "   <UserCard/>",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "   <Avatar />",
    codeSubA_A_extra_code6: "  </>",
    codeSubA_A_extra_code7: " );",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "}",
    codeSubA_A_extra_code10: "",
    codeSubB_A: 'import { Fragment } from "react";',
    codeSubB_A_extra_code1: "function UserList() {",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: " return (",
    codeSubB_A_extra_code4: "   <Fragment>",
    codeSubB_A_extra_code5: "    <UserCard/>",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "    <Avatar />",
    codeSubB_A_extra_code8: "   </Fragment>",
    codeSubB_A_extra_code9: " );",
    codeSubB_A_extra_code10: "",
    codeSubB_A_extra_code11: "}",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "The <Fragment></Fragment> syntax is only necessary if you want to pass the special key prop to the fragment, which will become important when you start working with lists.",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "Arrays in React: .map",
    subIntro_B:
      "In React, the map function is a powerful tool for dynamically rendering elements in your application. It allows you to iterate over an array of data and create React components or elements for each item in the array, making it a fundamental part of building dynamic and responsive user interfaces.",
    moreSubIntro_B:
      "The map function takes an array and applies a provided function to each element in the array. This function generates a new array of elements based on the transformation defined within the provided function. When used in React, this new array of elements can be easily rendered in your components, enabling you to display data dynamically.",
    codeSubA_B: "function ItemList({ items }) {",
    codeSubA_B_extra_code1: "  return (",
    codeSubA_B_extra_code2: "    <ul>",
    codeSubA_B_extra_code3: "      {items.map((item, index) => (",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "       <li key={index}>{item}</li>",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "      ))}",
    codeSubA_B_extra_code8: "    </ul>",
    codeSubA_B_extra_code9: "  );",
    codeSubA_B_extra_code10: "",
    codeSubA_B_extra_code11: "}",
    codeSubB_B: "const App = () => {",
    codeSubB_B_extra_code1: "const data = ['Item 1', 'Item 2', 'Item 3'];",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: " return (",
    codeSubB_B_extra_code10: "",
    codeSubB_B_extra_code11: "   <div>",
    codeSubB_B_extra_code12: "",
    codeSubB_B_extra_code13: "     <ItemList items={data} />",
    codeSubB_B_extra_code14: "",
    codeSubB_B_extra_code15: "   </div>",
    codeSubB_B_extra_code16: "",
    codeSubB_B_extra_code17: " );",
    codeSubB_B_extra_code19: "}",
    codeSubB_B_extra_code20: "",
    codeSubB_B_extra_code21: "export default App;",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B:
      " In React, the key attribute is a special and unique identifier that should be assigned to each dynamically rendered element when using the map function or creating lists of components.In the code example provided, the key attribute is set to index which works for simple lists where the items don't change their order. However, in a more complex scenario or when the order of items can change, it's better to use a unique and stable identifier from your data, such as an item's ID, as the key to ensure better performance and accurate updates. NOTE: You can use the spread operator in React when you want to pass the properties of an object or the elements of an array as separate props or items. This is particularly useful when you have an object or an array and you want to distribute its contents as individual props or elements to another component or function.",
    codeTextAA_B: "function ItemList({ items }) {",
    codeTextAA_B_extra_code1: " return (",
    codeTextAA_B_extra_code2: "   <ul>",
    codeTextAA_B_extra_code3: "    {items.map((item) => (",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "    <li key={item.id}>{item.text}</li>",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "    ))}",
    codeTextAA_B_extra_code8: "  </ul>",
    codeTextAA_B_extra_code9: " );",
    codeTextAA_B_extra_code10: "}",
    codeTextAB_B: "const App = () => {",
    codeTextAB_B_extra_code1: " const data = [{ id: 1, text: 'Item 1' },",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "               { id: 2, text: 'Item 2' },",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "               { id: 3, text: 'Item 3' }];",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAB_B_extra_code11: " return (",
    codeTextAB_B_extra_code12: "",
    codeTextAB_B_extra_code13: "  <div>",
    codeTextAB_B_extra_code14: "     <ItemList items={data} />",
    codeTextAB_B_extra_code15: "  </div>",
    codeTextAB_B_extra_code16: "",
    codeTextAB_B_extra_code17: " );",
    codeTextAB_B_extra_code18: "",
    codeTextAB_B_extra_code19: "}",
    codeTextAB_B_extra_code20: "",
    codeTextAB_B_extra_code21: "export default App;",
    codeTextAC_B: "// Spread operator:",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2:
      "// Here the Component will receive name, age, and city as individual props",
    codeTextAC_B_extra_code3: " ",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    codeTextAC_B_extra_code11: "const person = {",
    codeTextAC_B_extra_code12: "",
    codeTextAC_B_extra_code13: 'name: "John",',
    codeTextAC_B_extra_code14: "",
    codeTextAC_B_extra_code15: "age: 30,",
    codeTextAC_B_extra_code16: "",
    codeTextAC_B_extra_code17: 'city: "New York",',
    codeTextAC_B_extra_code18: "",
    codeTextAC_B_extra_code19: "};",
    codeTextAC_B_extra_code20: "<Component {...person} />",
    codeTextAC_B_extra_code21: "",
    textB_B:
      "COMPOSITION: When we build React applications, we often want to build complex components from simpler components. This is called composition. To do so you need to break down you application into components. You can then compose these components to build more complex components. It is important to figure out which components you need and how they should be composed. This is called application design.",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Passing JSX as children in the React Docs.",
      "https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children",
    ],
    externalLinksB: [
      "Thinking in React",
      "https://react.dev/learn/thinking-in-react",
    ],
    externalLinksC: [
      "Rendering List",
      "https://react.dev/learn/rendering-lists",
    ],
  },
  // -------------------------------------------------------4 Setup
  {
    _id: 4,
    link: "setup",
    title: "Setup",
    intro:
      "Project Scaffolding: Project scaffolding is the process of creating a new projec",
    moreIntro:
      "There are many possibilities but two will be shown here: Create React App & React+Vite",
    codeA: "//Create React App",
    codeA_extra_code1: "",
    codeA_extra_code2: "npx create-react-app my-app",
    codeA_extra_code3: "cd my-app",
    codeA_extra_code4: "",
    codeA_extra_code5: "npm start",
    codeA_extra_code6: "",
    codeA_extra_code7: "",
    codeA_extra_code8: "",
    codeA_extra_code9: "",
    codeA_extra_code10: "",
    codeA_extra_code11: "",
    codeA_extra_code12: "",
    codeA_extra_code13: "",
    codeA_extra_code14: "",
    codeA_extra_code15: "",
    codeA_extra_code16: "",
    codeA_extra_code17: "",
    codeA_extra_code18: "",
    codeA_extra_code19: "npm run build.",
    codeA_extra_code20: "",
    codeA_extra_code21: "//Open http://localhost:3000/ to see your app.",
    codeA_extra_code22: "",
    codeA_extra_code23: "",
    codeB: "//React + Vite",
    codeB_extra_code1: "",
    codeB_extra_code2: "npm create vite@latest my-app -- --template react",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeB_extra_code11: "cd my-app",
    codeB_extra_code12: "",
    codeB_extra_code13: "npm install",
    codeB_extra_code14: "",
    codeB_extra_code15: "npm run dev",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Folder Structure",
    subIntro:
      "You can delete or rename the other files. You may create subdirectories inside src. For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won’t see them",
    moreSubIntro:
      "If you have Git installed and your project is not part of a larger repository, then a new repository will be initialized resulting in an additional top-level .git directory. (Initialise a local repo: git init, git add  ., git commit -m 'your commit')",
    codeSubA: "",
    codeSubA_extra_code1: "",
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: "",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: "",
    codeSubA_extra_code6: "",
    codeSubA_extra_code7: "",
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA: "Folder structure in React",
    codeTextAA:
      "// node_modules - All packets required for react are located there",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5:
      "// public - This is where all files are stored that are output unchanged -> images or fonts",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7:
      '// src - Usually we create a "components" and "pages" folder here - everything comes together in App.jsx',
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAA_extra_code11:
      "//.gitignore - here we write everything that should not be uploaded to github",
    codeTextAA_extra_code12: "",
    codeTextAA_extra_code13:
      "// index.html - is the status point of our app. Everything is rendered into our div here with the ID root",
    codeTextAA_extra_code14: "",
    codeTextAA_extra_code15:
      "// package-lock.json - Here are all the required npm packages such as the version.",
    codeTextAA_extra_code16: "",
    codeTextAA_extra_code17:
      "// package.json - Here you can find information about our app-> name version etc",
    codeTextAA_extra_code18: "",
    codeTextAA_extra_code19:
      "// index.css - Global styling for e.g. :root, font import, colours etc, h1, h2 ,h3 ,h4",
    codeTextAA_extra_code20: "",
    codeTextAA_extra_code21:
      "// App.css - File for styling the main component; Nav, Header, Nav ",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "",
    subIntro_A: "",
    moreSubIntro_A: "",
    codeSubA_A: "",
    codeSubA_A_extra_code1: "",
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "",
    codeSubA_A_extra_code10: "",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A: "",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Create React App",
      "https://create-react-app.dev/docs/getting-started/",
    ],
    externalLinksB: ["React + Vite", "https://vitejs.dev/guide/"],
    externalLinksC: [
      "React and Tailwind CSS with Vite",
      "https://www.freecodecamp.org/news/how-to-install-tailwindcss-in-react/",
    ],
  },
  // -------------------------------------------------------5 State
  {
    _id: 5,
    link: "state",
    title: "State",
    intro:
      "State is data that changes over time. Your app can have data that changes over time. You might have liked a specific post, or not. The 'liked' state of a post can be on or off. Oftentimes such stateful data changes after a user interaction, like a click on a button. Hooks—functions starting with use—can only be called at the top level of your components or your own Hooks. You can’t call Hooks inside conditions, loops, or other nested functions. Hooks are functions, but it’s helpful to think of them as unconditional declarations about your component’s needs. You “use” React features at the top of your component similar to how you “import” modules at the top of your file.",
    moreIntro:
      "In React we work with state by using the useState hook. This is the value that is used in our app until something changes. Calling the useState function gives us two things in return: a variable with the current state as value and the set function to set a new stat. There is a naming convention for React apps that the state variable and the function always follow the pattern of x and setX",
    codeA: "import { useState } from 'react'",
    codeA_extra_code1: " ",
    codeA_extra_code2: "",
    codeA_extra_code3: "function SocialMediaPost() {",
    codeA_extra_code4: "",
    codeA_extra_code5: "",
    codeA_extra_code6: "",
    codeA_extra_code7: " ",
    codeA_extra_code8: "   const [liked, setLiked] = useState(false);",
    codeA_extra_code9: " ",
    codeA_extra_code10: "",
    codeA_extra_code11: "   function toggleLiked() {",
    codeA_extra_code12: "    setLiked(!liked);",
    codeA_extra_code13: "",
    codeA_extra_code14: "",
    codeA_extra_code15: "   }",
    codeA_extra_code16: " ",
    codeA_extra_code17: "   return (",
    codeA_extra_code18: "",
    codeA_extra_code19: "       <article>",
    codeA_extra_code20: "",
    codeA_extra_code21: "         <p>Liked: {liked ? 'Yes' : 'No'}</p>",
    codeA_extra_code22: "",
    codeA_extra_code23: "",
    codeA_extra_code24: "         <button type='button' onClick={toggleLiked}>",
    codeA_extra_code25: "          {liked ? 'Remove like' : 'Add like'}",
    codeA_extra_code26: "",
    codeA_extra_code27: "         </button>",
    codeA_extra_code28: "",
    codeA_extra_code29: "      </article>",
    codeA_extra_code30: "",
    codeB: "",
    codeB_extra_code1: "",
    codeB_extra_code2: "",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: 'import { useState } from "react";',
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "function SocialMediaPost() {",
    codeC_extra_code8: " ",
    codeC_extra_code9: "  const [liked, setLiked] = useState(false);",
    codeC_extra_code10: "",
    codeC_extra_code11: "  const [comments, setComments] = useState([]);",
    codeC_extra_code12: "",
    codeC_extra_code13: "  const [views, setViews] = useState(0);",
    codeC_extra_code14: " ",
    codeC_extra_code15: "/* ... */",
    codeC_extra_code16: "",
    codeC_extra_code17: "  return <article>{/* ... */}</article>;",
    codeC_extra_code18: "",
    codeC_extra_code19: "}",
    extraIntroMainTextA:
      'In React state is encapsulated per instance of a component. Think of a feed in a social media app. The feed is a list of posts. Each post is an individual instance of the SocialMediaPost component, each with individual state. When you change the "liked" state of one specific post, all other post stay as the are.',
    extraIntroMainTextB:
      "A React component can have multiple states. You can use the useState function as much as you need.",
    extraIntroMainTextc:
      "You can store all kinds of data in state (like booleans, numbers, strings, objects or arrays, see the example above).",
    subtitle: "State change",
    subIntro:
      'To handle state in React we can not simply use a "normal" variable and assign a new value. React needs to be informed that the data was changed. Calling the set function with a new value informs React, that state has changed. Changing a state triggers a re-render of the component',
    moreSubIntro:
      "React only changes the DOM nodes if there’s a difference between renders.Any screen update in a React app happens in three steps: Trigger, Render, Commit.React does not touch the DOM if the rendering result is the same as last time",
    codeSubA: "",
    codeSubA_extra_code1: "",
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: "",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: "",
    codeSubA_extra_code6: "",
    codeSubA_extra_code7: "",
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA: "",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Responding to events",
    subIntro_A:
      "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.",
    moreSubIntro_A:
      "Built-in components like <button> only support built-in browser events like onClick. However, you can also create your own components, and give their event handler props any application-specific names that you like.",
    codeSubA_A: 'import Toolbar from "/../.."',
    codeSubA_A_extra_code1: " ",
    codeSubA_A_extra_code3: "export default function App() {",
    codeSubA_A_extra_code5: " return ( ",
    codeSubA_A_extra_code7: "  <Toolbar",
    codeSubA_A_extra_code8: "   onPlayMovie={() => alert('Playing!')}",
    codeSubA_A_extra_code10: "   onUploadImage={() => alert('Uploading!')}",
    codeSubA_A_extra_code11: "  />",
    codeSubA_A_extra_code13: " );",
    codeSubA_A_extra_code15: "}",
    codeSubA_A_extra_code17: "",
    codeSubA_A_extra_code19: "",
    codeSubB_A: 'import Button from "/../.."',
    codeSubB_A_extra_code1: " ",
    codeSubB_A_extra_code3:
      "export default function Toolbar({ onPlayMovie, onUploadImage }) {",
    codeSubB_A_extra_code5: "  return (",
    codeSubB_A_extra_code7: "   <div>",
    codeSubB_A_extra_code8:
      "      <Button onClick={onPlayMovie}> Play Movie </Button>",
    codeSubB_A_extra_code10:
      "      <Button onClick={onUploadImage}> Upload Image </Button>",
    codeSubB_A_extra_code11: "   </div>",
    codeSubB_A_extra_code13: " );",
    codeSubB_A_extra_code15: "}",
    codeSubC_A: "export default function Button({ onClick, children }) {",
    codeSubC_A_extra_code1: "  return (",
    codeSubC_A_extra_code2: "    <button onClick={onClick}>{children}</button>",
    codeSubC_A_extra_code3: "  );",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "}",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "State: a component’s memory: Components need to “remember” things , the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "Updating objects & arrays in state",
    subIntro_B:
      "State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. ",
    moreSubIntro_B:
      "Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy. Usually, you will use the ... spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this",
    codeSubA_B: "import { useState } from 'react';",
    codeSubA_B_extra_code1: " ",
    codeSubA_B_extra_code3: "export default function Form() {",
    codeSubA_B_extra_code4: " ",
    codeSubA_B_extra_code6:
      " const [person, setPerson] = useState({name: 'Joe'});",
    codeSubA_B_extra_code7: " ",
    codeSubA_B_extra_code9: " function handleNameChange(e) {",
    codeSubA_B_extra_code10: "  setPerson({...person, name: e.target.value});",
    codeSubA_B_extra_code11: " }",
    codeSubA_B_extra_code12: " ",
    codeSubA_B_extra_code13: "  return (",
    codeSubA_B_extra_code15: "      <label> Name:",
    codeSubA_B_extra_code16:
      "        <input value={person.name} onChange={handleNameChange}/>",
    codeSubA_B_extra_code17: "      </label>",
    codeSubA_B_extra_code19: "   );",
    codeSubA_B_extra_code21: "}",
    codeSubA_B_extra_code23: "",
    codeSubA_B_extra_code27: "",
    codeSubA_B_extra_code29: "",
    codeSubA_B_extra_code30: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B:
      "If copying objects in code gets tedious, you can use a library like Immer to reduce repetitive code:",
    codeTextAA_B: "import { useImmer } from 'use-immer'",
    codeTextAA_B_extra_code1: " ",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "export default function Form() {",
    codeTextAA_B_extra_code4: " ",
    codeTextAA_B_extra_code5:
      "const [person, updatePerson] = useImmer({name: 'Joe'});",
    codeTextAA_B_extra_code6: " ",
    codeTextAA_B_extra_code7: " function handleNameChange(e) {",
    codeTextAA_B_extra_code8: "   updatePerson(draft => { ",
    codeTextAA_B_extra_code10: "    draft.name = e.target.value;",
    codeTextAA_B_extra_code11: "  });",
    codeTextAA_B_extra_code13: " }",
    codeTextAA_B_extra_code14: " ",
    codeTextAA_B_extra_code15: "  return (",
    codeTextAA_B_extra_code17: "      <label> Name:",
    codeTextAA_B_extra_code18:
      "        <input value={person.name} onChange={handleNameChange}/>",
    codeTextAA_B_extra_code19: "      </label>",
    codeTextAA_B_extra_code21: "   );",
    codeTextAA_B_extra_code23: "}",
    codeTextAA_B_extra_code25: "",
    codeTextAA_B_extra_code27: "",
    codeTextAA_B_extra_code29: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B:
      "UPDATING ARRAYS: Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array",
    codeTextBA_B: "import React, { useState } from 'react'",
    codeTextBA_B_extra_code1: "export default function App() {",
    codeTextBA_B_extra_code2:
      "   const [items, setItems] = useState(['Item 1', 'Item 2', 'Item 3']);",
    codeTextBA_B_extra_code3:
      "   const [newItemOfInput, setNewItemOfInput] = useState('');",
    codeTextBA_B_extra_code4: " ",
    codeTextBA_B_extra_code5:
      "   const handleInputChange = (event) => {setNewItemOfInput(event.target.value);}",
    codeTextBA_B_extra_code6: " ",
    codeTextBA_B_extra_code7: "   const handleAddItem = () => {",
    codeTextBA_B_extra_code8: "     setItems([...items, newItemOfInput]);",
    codeTextBA_B_extra_code9:
      "     newItemOfInput('');// Resets the input field after adding an element",
    codeTextBA_B_extra_code11: "    }",
    codeTextBA_B_extra_code12: "    ",
    codeTextBA_B_extra_code13: "return ( ",
    codeTextBA_B_extra_code14: " ",
    codeTextBA_B_extra_code15: "        <div>",
    codeTextBA_B_extra_code17:
      "           <ul>{items.map((item, index) => (<li key={index}>{item}</li>))} </ul>",
    codeTextBA_B_extra_code19:
      '           <input type="text" value={newItemOfInput} onChange={handleInputChange}/>',
    codeTextBA_B_extra_code20:
      "           <button onClick={handleAddItem}>Add Item</button>",
    codeTextBA_B_extra_code21: "        </div>",
    codeTextBA_B_extra_code23: "       );",
    codeTextBA_B_extra_code25: "}",
    codeTextBA_B_extra_code27: "",
    codeTextBA_B_extra_code30:
      "//Like in Object: If copying arrays in code gets tedious, you can use a library like Immer to reduce repetitive code",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Concept of state in the React Docs.",
      "https://react.dev/learn/adding-interactivity",
    ],
    externalLinksB: [
      "state updates and re-rendering in the React Docs.",
      "https://react.dev/learn/render-and-commit",
    ],
    externalLinksC: [
      "Use-immer Library",
      "https://github.com/immerjs/use-immer",
    ],
  },
  // -------------------------------------------------------6 State2
  {
    _id: 6,
    link: "state2",
    title: "State Down & UP, Forms & Hooks",
    intro:
      "Passing State Down:The value of a state variable and the setter function can be passed down to child components as props. They are functions and values, so they can be passed down like any other data.",
    moreIntro:
      "Lifting State Up: When we have multiple components that need to share state, we can lift the state up to the parent component and pass it down as props. This is called 'lifting state up' because you usually start with the state directly in the child component and then move it up to the parent components as you need it in more and more components. Any state variable should live as low in the component tree as possible but has high as needed. If the whole App needs to know about the state variable, it should live in the App component. If only child components of the Article need to know about the state variable, it should live in the Article component.",
    codeA: "//Passing State Down - Parent",
    codeA_extra_code1: 'import Child from "...."',
    codeA_extra_code2: " ",
    codeA_extra_code3: "export default function Parent() {",
    codeA_extra_code4: "  const [count, setCount] = useState(0);",
    codeA_extra_code7: "  function handleIncrement() {",
    codeA_extra_code9: "    setCount(count + 1);",
    codeA_extra_code11: "   }",
    codeA_extra_code12:
      " return <Child count={count} onIncrement={handleIncrement} />;",
    codeA_extra_code15: "}",
    codeA_extra_code17: "",
    codeA_extra_code19: "",
    codeB: "//Passing State Down - Child",
    codeB_extra_code1: " ",
    codeB_extra_code3: "",
    codeB_extra_code5:
      "export default function Child({ count, onIncrement }) {",
    codeB_extra_code7: " return (",
    codeB_extra_code9: "  <>",
    codeB_extra_code12: "   <p>Count: {count}</p> ",
    codeB_extra_code14: "   <button onClick={onIncrement}>increment</button>",
    codeB_extra_code15: "  </>",
    codeB_extra_code17: ");",
    codeB_extra_code19: "}",
    codeC: "//Lifting State Up - Child1: ",
    codeC_extra_code1: "import React, { useState } from 'react'",
    codeC_extra_code2: " ",
    codeC_extra_code4: "export default function Article(props) {",
    codeC_extra_code5: " ",
    codeC_extra_code7: " return (",
    codeC_extra_code9: "  <div>",
    codeC_extra_code10: "      <h2>{props.title}</h2>",
    codeC_extra_code12: "      <p>{props.content}</p>",
    codeC_extra_code13: "  </div>",
    codeC_extra_code15: " );",
    codeC_extra_code17: "}",
    codeC_extra_code19: "",
    subtitle: "",
    subIntro: "",
    moreSubIntro: "",
    codeSubA: "//Lifting State Up - Child2:",
    codeSubA_extra_code1: "import React, { useState } from 'react'",
    codeSubA_extra_code2: " ",
    codeSubA_extra_code4: "export default function CommentBox(props) {",
    codeSubA_extra_code5: " ",
    codeSubA_extra_code7: "  const [comment, setComment] = useState('');",
    codeSubA_extra_code9: "  const handleCommentChange = (event) => {",
    codeSubA_extra_code11: "       setComment(event.target.value);",
    codeSubA_extra_code13: "  }",
    codeSubA_extra_code14: " ",
    codeSubA_extra_code15: " return (",
    codeSubA_extra_code17: "      <div>",
    codeSubA_extra_code19: "        <h3>Your Comment:</h3>",
    codeSubA_extra_code21:
      "        <textarea value={comment} onChange={handleCommentChange} />",
    codeSubA_extra_code22:
      "        <button onClick={() => props.onCommentSubmit(comment)}>Send</button>",
    codeSubA_extra_code23: "      </div>",
    codeSubA_extra_code25: "      );",
    codeSubA_extra_code27: "}",
    codeSubA_extra_code29: "",
    codeSubB:
      "import React, { useState } from 'react'; //Lifting State Up - Parent",
    codeSubB_extra_code1: "import CommentBox from '....'",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "import Article from '....'",
    codeSubB_extra_code4: " ",
    codeSubB_extra_code5: "function App() {",
    codeSubB_extra_code6: " ",
    codeSubB_extra_code7: "  const [comments, setComments] = useState([]);",
    codeSubB_extra_code8: "  ",
    codeSubB_extra_code9: "  const handleCommentSubmit = (comment) => {",
    codeSubB_extra_code11: "   setComments([...comments, comment]);",
    codeSubB_extra_code13: " }",
    codeSubB_extra_code14: " ",
    codeSubB_extra_code15: " return (",
    codeSubB_extra_code17: "       <div>",
    codeSubB_extra_code18:
      '            <Article title="Title of the Article" content="Content of the article..." />',
    codeSubB_extra_code20:
      "            <CommentBox onCommentSubmit={handleCommentSubmit} />",
    codeSubB_extra_code21:
      "            <ul> {comments.map((comment, index) => (<li key={index}>{comment}</li>))}</ul>",
    codeSubB_extra_code23: "",
    codeSubB_extra_code25: "       </div>",
    codeSubB_extra_code27: "       );",
    codeSubB_extra_code29: "}",
    codeSubB_extra_code30: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA: "",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Handling Form Data",
    subIntro_A:
      "Using Form Data onSubmit: We can use the onSubmit event handler to handle form data. The onSubmit event handler is called when the user submits the form. We can get the form data (just like with regular JavaScript) from the event object.",
    moreSubIntro_A:
      "Example the input elements value is not manually controlled by React: The input is an 'uncontrolled input'. It's value is managed by the browser. In the submit event handler we just 'peek' at the input field and read the value from the DOM.",
    codeSubA_A: "export default function SearchForm() {",
    codeSubA_A_extra_code1: " function handleSubmit(event) {",
    codeSubA_A_extra_code3: "  event.preventDefault();",
    codeSubA_A_extra_code5: "  const form = event.target;",
    codeSubA_A_extra_code7:
      "  const searchTerm = form.elements.searchTerm.value;",
    codeSubA_A_extra_code9:
      "  console.log('A new search term was submitted:', searchTerm);",
    codeSubA_A_extra_code11: " }",
    codeSubA_A_extra_code13: " return (",
    codeSubA_A_extra_code15: "  <form onSubmit={handleSubmit}>",
    codeSubA_A_extra_code17: '    <label htmlFor="searchTerm">Search</label>',
    codeSubA_A_extra_code19: '    <input name="searchTerm" id="searchTerm" />',
    codeSubA_A_extra_code21: "    <button>Search</button>",
    codeSubA_A_extra_code23: "  </form>",
    codeSubA_A_extra_code25: " );",
    codeSubA_A_extra_code27: "}",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "Using Controlled Inputs: We can use React to control the value of an input element. This is called a 'controlled input'. This means that we manually set the value attribute of the input element. We can wire up a state variable to the value attribute of the input element. This way the input element will always have the same value as the state variable. Combined with the onChange event handler we can update the state variable when the user types in the input field.",
    codeTextAA_A: "export default function SearchForm() {",
    codeTextAA_A_extra_code1: " ",
    codeTextAA_A_extra_code2:
      ' const [searchTerm, setSearchTerm] = useState("");',
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: " ",
    codeTextAA_A_extra_code5: " function handleSubmit() {",
    codeTextAA_A_extra_code7: "    event.preventDefault();",
    codeTextAA_A_extra_code9:
      '    console.log("A new search term was submitted:", searchTerm);',
    codeTextAA_A_extra_code11: " }",
    codeTextAA_A_extra_code12: " ",
    codeTextAA_A_extra_code13: " return (",
    codeTextAA_A_extra_code15: "     <form onSubmit={handleSubmit}>",
    codeTextAA_A_extra_code17:
      '       <label htmlFor="searchTerm">Search</label>',
    codeTextAA_A_extra_code19:
      '       <input name="searchTerm" id="searchTerm" ',
    codeTextAA_A_extra_code20:
      "         onChange={(event) => setSearchTerm(event.target.value)}",
    codeTextAA_A_extra_code21: "       />",
    codeTextAA_A_extra_code23:
      "       <button>Search for {searchTerm}</button>",
    codeTextAA_A_extra_code25: "     </form>",
    codeTextAA_A_extra_code27: "  ); ",
    codeTextAA_A_extra_code29: " }  ",

    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "State Updates are not Immediate",
    subIntro_B:
      "When we call the setter function of a state variable, React will not immediately update the state variable. Instead, it will update it's internal value and schedule a re-render of the component.",
    moreSubIntro_B:
      "The prefix prev is used to indicate that the value is the previous value of the state variable. Another common convention is to use the just the first letter of the state variable as the parameter name: setCount(c => c + 1).",
    codeSubA_B: "// ⚠️ This code is broken!",
    codeSubA_B_extra_code1: "export default function Counter() {",
    codeSubA_B_extra_code2:
      "  const [count, setCount] = useState(0); // count is 0 initially",
    codeSubA_B_extra_code3: "  function handleIncrement() { ",
    codeSubA_B_extra_code4:
      "     //when this is first called, count is still 0",
    codeSubA_B_extra_code5: "     console.log(count); // → 0",
    codeSubA_B_extra_code6: "     //this will set reacts internal state to 1,",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "     //but does not update the count variable",
    codeSubA_B_extra_code9: "     setCount(count + 1);",
    codeSubA_B_extra_code11: "     console.log(count); // → 0",
    codeSubA_B_extra_code12:
      "     //the count variable is still 0, thus count + 1 is still 1,",
    codeSubA_B_extra_code13: "",
    codeSubA_B_extra_code14: "     //so react's internal state will still be 1",
    codeSubA_B_extra_code15: "     setCount(count + 1);",
    codeSubA_B_extra_code17: "     console.log(count); // → 0",
    codeSubA_B_extra_code18:
      "     //since setter functions were called, react will schedule a re-render of the component with the new count value of 1",
    codeSubA_B_extra_code19: " }",
    codeSubA_B_extra_code21: " return (",
    codeSubA_B_extra_code23: "  <>",
    codeSubA_B_extra_code24: "   <p>Count: {count}</p>",
    codeSubA_B_extra_code26:
      "   <button onClick={handleIncrement}>increment by 2</button>",
    codeSubA_B_extra_code27: "  </>",
    codeSubA_B_extra_code29: " );",
    codeSubA_B_extra_code30: "}",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B:
      "This behavior can be unexpected, but it is important to understand that state variables are not immediately updated. There are a few ways to fix the code above. In this example we could call setCount(count + 2) and be done. If for some reason we need to call setCount twice, we can use the functional form of the setter function, which provides the current internal value of the state variable as an argument.",
    codeTextAA_B: "// ⚠️ This code is unnecessary complicated, but it works!",
    codeTextAA_B_extra_code1: "export default function Counter() {",
    codeTextAA_B_extra_code2:
      "  const [count, setCount] = useState(0); // count is 0 initially",
    codeTextAA_B_extra_code3: "  function handleIncrement() {",
    codeTextAA_B_extra_code4:
      "     //when this is first called, count is still 0",
    codeTextAA_B_extra_code5: "     console.log(count); // → 0",
    codeTextAA_B_extra_code6:
      "     // this will set reacts internal state to 1, but does not update the count variable",
    codeTextAA_B_extra_code7: "     setCount((prevCount) => prevCount + 1);",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "     console.log(count); // → 0",
    codeTextAA_B_extra_code10:
      "     // the internal value of count is 1, we get it as the the first parameter of the function we pass to the setter. 1 + 1 is 2, so react's internal state will now be _2_",
    codeTextAA_B_extra_code11: "     setCount((prevCount) => prevCount + 1);",
    codeTextAA_B_extra_code13: "     console.log(count); // → 0",
    codeTextAA_B_extra_code14:
      "     // since setter functions were called, react will schedule a re-render of the component with the new count value of _2_",
    codeTextAA_B_extra_code15: " }",
    codeTextAA_B_extra_code17: " return (",
    codeTextAA_B_extra_code19: "   <>",
    codeTextAA_B_extra_code20: "     <p>Count: {count}</p>",
    codeTextAA_B_extra_code22:
      "     <button onClick={handleIncrement}>increment by 2</button>",
    codeTextAA_B_extra_code25: "   </>",
    codeTextAA_B_extra_code27: "  );",
    codeTextAA_B_extra_code29: "}",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B:
      "Hooks are functions that allow component functions to hook into React features (like state) and allow components to do more than a traditional JavaScript function can. They follow the naming convention useXzy. Common hooks that you'll come across are useState and useEffect. When using hooks you need to follow a few rules: Only call hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions. Only call hooks from React function components or custom hooks. Don’t call Hooks from regular JavaScript functions.",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Hooks in the React Docs",
      "https://legacy.reactjs.org/docs/hooks-overview.html",
    ],
    externalLinksB: [
      "Sharing State Between Components",
      "https://react.dev/learn/sharing-state-between-components",
    ],
  },
  // -------------------------------------------------------7State3
  {
    _id: 7,
    link: "state3",
    title: "Avoiding State Mutation",
    intro:
      "Regardless of how complex the state you have in your application (object, array, array of objects) is, you must always treat state as immutable. This means that you should not directly mutate the state, e.g. with reassigning a new value to it.",
    moreIntro:
      "To avoid mutation when updating state, you need to: create a new object / array (or make a copy of the existing one), and use the setter function with the recently created / updated copy in order to cause a re-render. Updating Objects in State:",
    codeA: "//Objects",
    codeA_extra_code1: "",
    codeA_extra_code2: "",
    codeA_extra_code3:
      'const [person, setPerson] = useState({firstName: "John", lastName: "Doe", });',
    codeA_extra_code4: "",
    codeA_extra_code5:
      "function handleChangeFirstName(firstName) { setPerson({ ...person, firstName }); }",
    codeA_extra_code6: "// Somewhere else:",
    codeA_extra_code7: 'handleChangeFirstName("Jane");',
    codeA_extra_code8: " ",
    codeA_extra_code9:
      "// ❌ NEVER DO THAT  function handleChangeFirstName(firstName) {",
    codeA_extra_code11: "// ❌                  person.firstName = firstName;}",
    codeA_extra_code13: "// ❌                  setPerson(person);",
    codeA_extra_code15: "// ❌                 };",
    codeB:
      "//Arrays: add ([...arr] spread syntax), remove(filter), replacing (map), sorting (copy with [...arr] & reverse, sort)",
    codeB_extra_code1: "const [numbers, setNumbers] = useState([0, 1, 2]);",
    codeB_extra_code2:
      "function handleAppendNumber(number) {setNumbers([...numbers, number])};",
    codeB_extra_code3: "handleAppendNumber(3);// Somewhere else",
    codeB_extra_code4:
      "function handlePrependNumber(number) {setNumbers([number, ...numbers])};",
    codeB_extra_code5: "handlePrependNumber(-1);// Somewhere else",
    codeB_extra_code6: "function handleRemoveNumber(numberToRemove) {",
    codeB_extra_code7: "",
    codeB_extra_code8:
      "  setNumbers(numbers.filter((number) => number !== numberToRemove));",
    codeB_extra_code9: "",
    codeB_extra_code10: "}",
    codeB_extra_code11: "handleRemoveNumber(1);// Somewhere else",
    codeB_extra_code12: "function handleReplaceNumber(oldNumber, newNumber) {",
    codeB_extra_code13: "",
    codeB_extra_code14: " setNumbers(",
    codeB_extra_code15: "",
    codeB_extra_code16: "   numbers.map((number) => {",
    codeB_extra_code17: "",
    codeB_extra_code18: "     if (number === oldNumber) return newNumber;",
    codeB_extra_code20: "     return number;",
    codeB_extra_code22: "   })",
    codeB_extra_code24: "  );",
    codeB_extra_code26: "}",
    codeB_extra_code27: "handleReplaceNumber(1, 333);// Somewhere else",
    codeB_extra_code30: "",
    codeC:
      "//Arrays of Objects in State: Add(spread syntax), Remove(filter), Replace(map), Sort(copy with spread and sort or replace",
    codeC_extra_code1:
      'const [fruits, setFruits] = useState([{ id: 0, name: "banana", color: "yellow"}, { id: 1, name: "pear", color: "green"}]);',
    codeC_extra_code2:
      "function handleAddFruit(fruit) {setFruits([...fruits, fruit])};",
    codeC_extra_code3:
      'handleAddFruit({id: 2, name: "plum", color: "purple"}); // Somewhere else',
    codeC_extra_code4: "function handleRemoveFruit(idFruit) {",
    codeC_extra_code5: "",
    codeC_extra_code6:
      " setFruits(fruits.filter((fruit) => fruit.id !== idToRemove));",
    codeC_extra_code7: "",
    codeC_extra_code8: "}",
    codeC_extra_code9: "handleRemoveFruit(1); // Somewhere else",
    codeC_extra_code10: "function handleSetNewColor(id, color) {",
    codeC_extra_code11: "",
    codeC_extra_code12: "  setFruits(",
    codeC_extra_code14: "    fruits.map((fruit) => {",
    codeC_extra_code16: "     if (fruit.id === id) return { ...fruit, color };",
    codeC_extra_code18: "     return fruit;",
    codeC_extra_code20: "    })",
    codeC_extra_code22: "  );",
    codeC_extra_code24: "}",
    codeC_extra_code25: 'handleSetNewColor(2, "lila" );// Somewhere else:',
    codeC_extra_code26: "handleAlphabeticalSortedFruits(){ ",
    codeC_extra_code27: "",
    codeC_extra_code28: "      setFruits([...fruits].sort((a, b) => {",
    codeC_extra_code29: "",
    codeC_extra_code30: "      return a.name.localeCompare(b.name)})",
    subtitle: "Choosing the State Structure",
    subIntro:
      "There are some common pitfalls when choosing your state structure.",
    moreSubIntro:
      "Group Related State: If you have state that belongs (and updates) together, group it into a single object. This makes it easier to update the state.",
    codeSubA: "// ❌ No",
    codeSubA_extra_code1: 'const [userName, setUserName] = useState("Alex");',
    codeSubA_extra_code3: "const [userAge, setUserAge] = useState(28);",
    codeSubA_extra_code5: "// ✅ BETTER",
    codeSubA_extra_code7:
      'const [user, setUser] = useState({ name: "Alex", age: 28 });',
    codeSubA_extra_code9: "",
    codeSubA_extra_code11: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "Avoid Duplication in State: Avoid storing the same value in multiple places in state. This can lead to bugs and makes it harder to update the state.",
    codeTextAA:
      'const [fruits, setFruits] = useState([{ id: 0, name: "banana", color: "yellow"}, { id: 1, name: "pear", color: "green"}]); ',
    codeTextAA_extra_code1: "// ❌ No ",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3:
      "const [selectedFruit, setSelectedFruit] = useState(fruits.find((fruit) => fruit.id === 0));",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5:
      "setSelectedFruit(fruits.find((fruit) => fruit.id === 1)); // Somewhere else",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "// ✅ GOOD",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9:
      "const [selectedFruitId, setSelectedFruitId] = useState(0);",
    codeTextAA_extra_code11:
      "const selectedFruit = fruits.find((fruit) => fruit.id === selectedFruitId);",
    codeTextAA_extra_code13: "setSelectedTreeId(1);",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB:
      "Avoid Having Duplicate Lists in State: If you have a list of items in state, you should avoid storing a derived version of it in a different state variable. This is a common mistake when you want to display a filtered version of the list.",
    codeTextBA:
      'const [fruits, setFruits] = useState([{ id: 0, name: "banana", weight: 150}, { id: 1, name: "pear", weight: 200 },{id: 2, name: "plum", weight: 50} ]); ',
    codeTextBA_extra_code1: "// ❌ No",
    codeTextBA_extra_code3:
      "const [filteredFruits, setFilteredFruits] = useState(fruits.filter((fruit) => fruit.weight > 100));",
    codeTextBA_extra_code5:
      "setFilteredFruits(fruits.filter((fruit) => fruit.weight > 150));",
    codeTextBA_extra_code7: "// ✅ GOOD",
    codeTextBA_extra_code9: "const [minWeight, setMinWeight] = useState(100)",
    codeTextBA_extra_code11:
      "const filteredFruits = fruits.filter((fruit) => fruit.weight > minWeight);",
    codeTextBA_extra_code13: "setMinHeight(150)",
    codeTextBA_extra_code15: "",
    codeTextBA_extra_code17: "",
    codeTextBA_extra_code19: "",
    codeTextBA_extra_code21: "",
    codeTextBA_extra_code23: "",
    codeTextBA_extra_code25: "",
    codeTextBA_extra_code27: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "",
    subIntro_A: "",
    moreSubIntro_A: "",
    codeSubA_A: "",
    codeSubA_A_extra_code1: "",
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "",
    codeSubA_A_extra_code10: "",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A: "",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Updating Arrays in State",
      "https://react.dev/learn/updating-arrays-in-state",
    ],
    externalLinksB: [
      "Updating Objects in State",
      "https://react.dev/learn/updating-objects-in-state",
    ],
    externalLinksC: [
      "Choosing the State Structure in the React Docs.",
      "https://react.dev/learn/choosing-the-state-structure",
    ],
  },
  // -------------------------------------------------------8Effect
  {
    _id: 8,
    link: "effect",
    title: "useEffect & Fetch",
    intro:
      "Effects are a way to synchronize React components with external systems. Using an effect is an escape hatch from the declarative world of React. It is a way to run imperative code that is not directly related to rendering the UI. The useEffect hook is used to add effects to a React component. It takes two arguments, a function that defines the effect (usually an anonymous function) and n array of variables that the effect depends on   ",
    moreIntro: "",
    codeA: "import { useEffect } from 'react';",
    codeA_extra_code1: "function Title({ title }) {",
    codeA_extra_code2: "",
    codeA_extra_code3: " useEffect(() => {",
    codeA_extra_code4: "  // updating the document title is a side effect",
    codeA_extra_code5: "",
    codeA_extra_code6: "  // that is not directly related to rendering the UI",
    codeA_extra_code7: "  document.title = title;",
    codeA_extra_code8: "",
    codeA_extra_code9: " });",
    codeA_extra_code11: " ",
    codeA_extra_code13: " return <h1>{title}</h1>;",
    codeA_extra_code15: "}",
    codeA_extra_code17: "",
    codeA_extra_code19: "",
    codeA_extra_code21: "",
    codeA_extra_code23: "",
    codeB: "",
    codeB_extra_code1: "",
    codeB_extra_code2: "",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Effect Dependencies & Cleanup Function",
    subIntro:
      "The effect above will run after the component was rendered and the DOM was updated. But that is way more often than necessary. The effect should only run when the title prop changes. To achieve this, we can pass an array of reactive values to the useEffect() hook. The effect will only run when one of the reactive values in the array changes.",
    moreSubIntro:
      "This becomes important when the component function has more than one prop or state variable. Imagine having a count state in the component:",
    codeSubA: "import { useEffect } from 'react';",
    codeSubA_extra_code1: "function Title({ title }) {",
    codeSubA_extra_code3: " useEffect(() => {",
    codeSubA_extra_code5: "  document.title = title;",
    codeSubA_extra_code7: "  }, [title]);",
    codeSubA_extra_code9: " return <h1>{title}</h1>;",
    codeSubA_extra_code11: "}",
    codeSubA_extra_code13: "",
    codeSubA_extra_code15: "",
    codeSubA_extra_code17: "",
    codeSubA_extra_code19: "",
    codeSubB: "import { useEffect, useState } from 'react'",
    codeSubB_extra_code1: "function Title({ title }) {",
    codeSubB_extra_code2: " ",
    codeSubB_extra_code3: " const [count, setCount] = useState(0);",
    codeSubB_extra_code4: " ",
    codeSubB_extra_code5: " useEffect(() => {",
    codeSubB_extra_code7: "   document.title = title;",
    codeSubB_extra_code9: " }, [title]);",
    codeSubB_extra_code10: " ",
    codeSubB_extra_code11: " return (",
    codeSubB_extra_code13: "  <div>",
    codeSubB_extra_code15: "    <h1>{title}</h1>",
    codeSubB_extra_code17: "    <p>{count}</p>",
    codeSubB_extra_code19:
      '          <button type="button" onClick={() => setCount(count + 1)}>',
    codeSubB_extra_code21: "          Increment",
    codeSubB_extra_code23: "          </button>",
    codeSubB_extra_code25: "  </div>",
    codeSubB_extra_code27: " );",
    codeSubB_extra_code29: "}",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "The effect function will only run when the title variable is different from the previous value. The count state variable is not part of the array, so the effect will not run when the count state changes. If the effect has no dependencies the dependency array should be empty: An empty dependency array tells React to run this effect only once: when the component appears on the screen for the first time. Cleanup Function: The effect function can return a cleanup function that is executed before the effect function runs again, or when the component is unmounted.",
    codeTextAA: "import { useEffect } from 'react';",
    codeTextAA_extra_code1: "function Title({ title }) {",
    codeTextAA_extra_code2: " ",
    codeTextAA_extra_code3: " useEffect(() => {",
    codeTextAA_extra_code4: "  // make a copy of the old title",
    codeTextAA_extra_code5: "  const oldTitle = document.title;",
    codeTextAA_extra_code7: "  document.title = title;",
    codeTextAA_extra_code8: "  // cleanup function",
    codeTextAA_extra_code9: "  return () => {",
    codeTextAA_extra_code10:
      "   // undo what we have done by setting the old title again",
    codeTextAA_extra_code11: "   document.title = oldTitle;",
    codeTextAA_extra_code13: "   };",
    codeTextAA_extra_code15: " }, [title]);",
    codeTextAA_extra_code17: " ",
    codeTextAA_extra_code19: " return <h1>{title}</h1>;",
    codeTextAA_extra_code21: "}",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB:
      "The cleanup function should undo the side effects of the effect function. In the example above, the cleanup function resets the document title to the default value. When the effect function is used to set up a subscription or global event handler, the cleanup function should remove the subscription or event handler. For timers, the cleanup function should clear the timer.",
    codeTextBA: "import { useEffect, useState } from 'react';",
    codeTextBA_extra_code1: "function WindowWidth() {",
    codeTextBA_extra_code3:
      " const [windowWidth, setWindowWidth] = useState();",
    codeTextBA_extra_code4: " ",
    codeTextBA_extra_code5: " useEffect(() => {      ",
    codeTextBA_extra_code7: "  function handleResize(event) {",
    codeTextBA_extra_code9: "    setWindowWidth(event.target.innerWidth);",
    codeTextBA_extra_code11: "  }",
    codeTextBA_extra_code13:
      '  window.addEventListener("resize", handleResize);',
    codeTextBA_extra_code14: "  // cleanup function",
    codeTextBA_extra_code15: "  return () => {",
    codeTextBA_extra_code17:
      '      window.removeEventListener("resize", handleResize);',
    codeTextBA_extra_code19: "  };",
    codeTextBA_extra_code21: " }, []);",
    codeTextBA_extra_code22: " ",
    codeTextBA_extra_code23:
      " return <p>The window is {windowWidth}px wide. 📏</p>;",
    codeTextBA_extra_code25: "}",
    codeTextBA_extra_code27: "",
    codeTextBA_extra_code29: "",
    codeTextBB: "import { useEffect, useState } from 'react';",
    codeTextBB_extra_code1: "function Timer() {",
    codeTextBB_extra_code2: " ",
    codeTextBB_extra_code3: " const [seconds, setSeconds] = useState(0);",
    codeTextBB_extra_code5: "  useEffect(() => {",
    codeTextBB_extra_code7: "    const timer = setInterval(() => {",
    codeTextBB_extra_code9: "       setSeconds((s) => s + 1);",
    codeTextBB_extra_code11: "    }, 1000);",
    codeTextBB_extra_code12: "    // cleanup function",
    codeTextBB_extra_code13: "    return () => {",
    codeTextBB_extra_code15: "     clearInterval(timer);",
    codeTextBB_extra_code17: "    };",
    codeTextBB_extra_code19: "  }, []);",
    codeTextBB_extra_code21: "   ",
    codeTextBB_extra_code23:
      " return <p>The timer is at {seconds} seconds. ⏱</p>;",
    codeTextBB_extra_code25: "}",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "How to Fetch Data in React",
    subIntro_A:
      "After the initial rendering of a component, an effect function runs to fetch data, updating a state variable. If the fetch depends on a prop or state, the effect function re-runs upon changes. While the effect function can't be async, it can call async functions. To address this, define an async function inside the effect function and call it immediately without awaiting its result.",
    moreSubIntro_A: "import { useEffect, useState } from 'react';",
    codeSubA_A: "function Jokes() {",
    codeSubA_A_extra_code1: " const [jokes, setJokes] = useState([]);",
    codeSubA_A_extra_code2: " ",
    codeSubA_A_extra_code3: " useEffect(() => {",
    codeSubA_A_extra_code5: "   async function startFetching() {",
    codeSubA_A_extra_code7: "     const response = await fetch(",
    codeSubA_A_extra_code9: '       "https://example/api/jokes"',
    codeSubA_A_extra_code11: "     );",
    codeSubA_A_extra_code13: "     const jokes = await response.json();",
    codeSubA_A_extra_code15: "     setJokes(jokes);",
    codeSubA_A_extra_code17: "    }",
    codeSubA_A_extra_code18: "   startFetching();",
    codeSubA_A_extra_code19: " }, []);",
    codeSubA_A_extra_code20: " ",
    codeSubA_A_extra_code21: " return (",
    codeSubA_A_extra_code23: "  <ul> {jokes.map(({ id, joke }) => (",
    codeSubA_A_extra_code25: "        <li key={id}>{joke}</li> ))} </ul>",
    codeSubA_A_extra_code27: "  );",
    codeSubA_A_extra_code29: "}",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "If the data you want to fetch is dependent on a prop or state variable, you need to add it to the array of variables that the effect depends on:",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "import { useEffect, useState } from 'react';",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code3: "function Joke({ id }) {",
    codeTextAB_A_extra_code5: " const [joke, setJoke] = useState();",
    codeTextAB_A_extra_code7: " useEffect(() => {",
    codeTextAB_A_extra_code9: "   async function startFetching() {",
    codeTextAB_A_extra_code11:
      "       const response = await fetch( `https://example.app/api/jokes/${id});`",
    codeTextAB_A_extra_code13: "       const joke = await response.json();",
    codeTextAB_A_extra_code15: "       setJoke(joke);",
    codeTextAB_A_extra_code17: "   }",
    codeTextAB_A_extra_code18: "   startFetching();",
    codeTextAB_A_extra_code20: "   }, [id]);",
    codeTextAB_A_extra_code21: " ",
    codeTextAB_A_extra_code22: "  ",
    codeTextAB_A_extra_code23: " if (!joke) { return null; }",
    codeTextAB_A_extra_code25: " ",
    codeTextAB_A_extra_code27: " return <h2>{joke.joke}</h2>;",
    codeTextAB_A_extra_code29: "}",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A:
      "The mentioned method is effective for basic scenarios but lacks key features: The approach falls short in handling race conditions, loading states, errors (both network and API errors), and lacks caching capabilities.  We can use data fetching library to address these issues ( the library will use effects (and the useEffect hook) under the hood to fetch data.).",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Synchronizing with Effects",
      "https://react.dev/learn/synchronizing-with-effects",
    ],
    externalLinksB: [
      "You Might Not Need an Effect",
      "https://react.dev/learn/you-might-not-need-an-effect",
    ],
    externalLinksC: [
      "Fetching data",
      "https://react.dev/learn/synchronizing-with-effects#fetching-data",
    ],
  },
  // -------------------------------------------------------9Storage
  {
    _id: 9,
    link: "storage",
    title: "Local Storage",
    intro:
      "Web Storage API is not part of React. It is a browser API that is available in all modern browsers. This  provides two methods for storing data on the client. LocalStorage stores data with no expiration date. SessionStorage stores data for one session (data is lost when the browser tab is closed).",
    moreIntro:
      "The Web Storage API only supports strings, numbers and booleans. To store more complex data, you need to serialize it first. This can be done using the JSON.stringify() method",
    codeA: "//HOW to use localStorage:",
    codeA_extra_code1: "",
    codeA_extra_code2: "//Storing Data use the setItem()",
    codeA_extra_code3: 'localStorage.setItem("name", "Jane");',
    codeA_extra_code5: 'localStorage.setItem("age", 28);',
    codeA_extra_code7: 'localStorage.setItem("isOnline", true);',
    codeA_extra_code8:
      "//Retrieving Data usethe getItem() method, getItem() returns null if the key does not exist.",
    codeA_extra_code9: 'const name = localStorage.getItem("name"); // → "Jane"',
    codeA_extra_code11: 'const age = localStorage.getItem("age"); // → 28',
    codeA_extra_code13: 'const nope = localStorage.getItem("nope"); // → null',
    codeA_extra_code14: "//Removing Data use the removeItem() method",
    codeA_extra_code15: 'localStorage.removeItem("name");',
    codeA_extra_code16: "//Clearing All Data,  use the clear() method",
    codeA_extra_code17: "localStorage.clear();",
    codeB: "//How to Storing Complex Data",
    codeB_extra_code1: "const user = {",
    codeB_extra_code3: ' name: "Jane"',
    codeB_extra_code5: " age:28",
    codeB_extra_code7: "};",
    codeB_extra_code9: 'localStorage.setItem("user", JSON.stringify(user));',
    codeB_extra_code10:
      "//To retrieve the data, you need to parse it using the JSON.parse()",
    codeB_extra_code11:
      'const user = JSON.parse(localStorage.getItem("user"));',
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Helper Functions",
    subIntro:
      "To make working with the Web Storage API easier, you can create helper functions that encapsulate the serialization and deserialization:",
    moreSubIntro: "",
    codeSubA: "//store data",
    codeSubA_extra_code1: "function setItem(key, value) {",
    codeSubA_extra_code3:
      "   localStorage.setItem(key, JSON.stringify(value));",
    codeSubA_extra_code5: "}",
    codeSubA_extra_code7: "//retrieve data",
    codeSubA_extra_code9: "function getItem(key) {",
    codeSubA_extra_code11: " return JSON.parse(localStorage.getItem(key));",
    codeSubA_extra_code13: "}",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "These functions will work with simple data types like strings and numbers as well as complex data types",
    codeTextAA: 'setItem("user", {',
    codeTextAA_extra_code1: ' name: "Jane",',
    codeTextAA_extra_code3: " age: 28,",
    codeTextAA_extra_code5: "});",
    codeTextAA_extra_code7: 'setItem("count", 42);',
    codeTextAA_extra_code9: " ",
    codeTextAA_extra_code11: 'const user = getItem("user");',
    codeTextAA_extra_code13: 'const count = getItem("count");',
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "React with Local Storage",
    subIntro_A:
      "In React, you can leverage the Web Storage API, typically opting to persist state in local storage for page reload resilience. React offers various methods to sync state with local storage, involving retrieving the initial state and updating local storage on state changes. To simplify the process, it's advisable to use a library with a dedicated hook for this purpose.",
    moreSubIntro_A: "",
    codeSubA_A: "",
    codeSubA_A_extra_code1: "",
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "",
    codeSubA_A_extra_code10: "",
    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "The use-local-storage-state  library provides a hook that allows you to persist state in local storage. You can use it as a drop-in replacement for the useState hook",
    codeTextAA_A: 'import useLocalStorageState from "use-local-storage-state";',
    codeTextAA_A_extra_code1: "function Counter() {",
    codeTextAA_A_extra_code3:
      ' const [count, setCount] = useLocalStorageState("count", { defaultValue: 0 });',
    codeTextAA_A_extra_code5: " return (",
    codeTextAA_A_extra_code7: "    <div>",
    codeTextAA_A_extra_code9: "       <p>Count: {count}</p>",
    codeTextAA_A_extra_code11:
      "       <button onClick={() => setCount(count + 1)}>Increment</button>",
    codeTextAA_A_extra_code13: "    </div>",
    codeTextAA_A_extra_code15: " );",
    codeTextAA_A_extra_code17: "}",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A:
      "The key in the useLocalStorageState hook's first argument determines the local storage state storage. Using the same key across multiple components results in shared state. With use-local-storage-state, there's no need to manage serialization or parsing for complex data – the library handles it automatically.",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Web Storage API",
      "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",
    ],
    externalLinksB: [
      "use-local-storage-state on GitHub",
      "https://github.com/astoilkov/use-local-storage-state",
    ],
  },
  // -------------------------------------------------------10 Hooks
  {
    _id: 10,
    link: "c-hooks",
    title: "Custom Hooks",
    intro:
      "React provides fundamental hooks like useState and useEffect, but for more specific scenarios, you can craft custom hooks. These functions, prefixed with 'use', can utilize other hooks. Examples include a state with specific update functions (e.g., value, increment(), decrement(), reset() → useCount()), synchronization with window events and values (e.g., useWindowWidth()), representation of a fetched resource (e.g., useFetch()), or persistence in the browser's local storage (e.g., useLocalStorageState()).",
    moreIntro: "You could define a custom useCount hook like this",
    codeA: "import { useState } from 'react';",
    codeA_extra_code1: "function useCount(initialValue = 0) {",
    codeA_extra_code3: " const [count, setCount] = useState(initialValue);",
    codeA_extra_code5: " function increment() {setCount(count + 1)};",
    codeA_extra_code7: " function decrement() {setCount(count - 1)};",
    codeA_extra_code9: " function reset() {setCount(initialValue)}; ",
    codeA_extra_code11: " return { count, increment, decrement, reset };",
    codeA_extra_code13: "}",
    codeA_extra_code8: "",
    codeA_extra_code9: "",
    codeA_extra_code10: "",
    codeB: "//And use it like this:",
    codeB_extra_code1: 'import { useCount } from "./useCount";',
    codeB_extra_code3: "function Counter() {",
    codeB_extra_code5:
      "  const { count, increment, decrement, reset } = useCount(0);",
    codeB_extra_code7: "  return (",
    codeB_extra_code9: "    <div>",
    codeB_extra_code11: "      <p>Count: {count}</p>",
    codeB_extra_code13: "      <button onClick={increment}>Increment</button>",
    codeB_extra_code15: "      <button onClick={decrement}>Decrement</button>",
    codeB_extra_code17: "      <button onClick={reset}>Reset</button>",
    codeB_extra_code19: "   </div>",
    codeB_extra_code21: "  );",
    codeB_extra_code23: "}",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Custom Hook Return Values",
    subIntro:
      "Custom hooks can return anything a normal function can return. Sometimes hooks only need to return a single value, an array or an object like the example above",
    moreSubIntro:
      "The return statement makes use of object shorthand notation. This is a nice way to return an object with properties that have the same name as the variable. The above is equivalent to",
    codeSubA: "return {",
    codeSubA_extra_code1: " count: count,",
    codeSubA_extra_code3: " increment: increment,",
    codeSubA_extra_code5: " decrement: decrement,",
    codeSubA_extra_code7: " reset: reset,",
    codeSubA_extra_code9: "};",
    codeSubA_extra_code11: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "Hook Parameters: Similar to regular functions, custom hook functions in React can take parameters, enhancing their flexibility. For instance, in the useCount example mentioned earlier, you can pass the initial value as a parameter.",
    codeTextAA: "function useCount(initialValue = 0) {",
    codeTextAA_extra_code1: " // …",
    codeTextAA_extra_code2: "}",
    codeTextAA_extra_code3: " ",
    codeTextAA_extra_code4:
      "const { count, increment, decrement, reset } = useCount(1337);",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A:
      "Condense repetitive logic by encapsulating it within custom hooks",
    subIntro_A:
      "A simple useFetch hook:Given the widespread use of fetching data, it makes a prime candidate for a custom hook.",
    moreSubIntro_A:
      "Below is a basic useFetch hook that fetches a resource and provides the parsed response.",
    codeSubA_A: "import { useState, useEffect } from 'react';",
    codeSubA_A_extra_code1: "export function useFetch(url) {",
    codeSubA_A_extra_code3: "  const [data, setData] = useState();",
    codeSubA_A_extra_code5: "  useEffect(() => {",
    codeSubA_A_extra_code7: "    async function startFetching() {",
    codeSubA_A_extra_code9: "      const response = await fetch(url);",
    codeSubA_A_extra_code11: "      const data = await response.json();",
    codeSubA_A_extra_code13: "      setData(data);",
    codeSubA_A_extra_code15: "    }",
    codeSubA_A_extra_code17: "    startFetching();",
    codeSubA_A_extra_code19: "  }, [url]);",
    codeSubA_A_extra_code21: "  ",
    codeSubA_A_extra_code23: "  return data;",
    codeSubA_A_extra_code25: "}",
    codeSubB_A: "//And use it like this:",
    codeSubB_A_extra_code1: 'import { useFetch } from "./useFetch";',
    codeSubB_A_extra_code3: "function App() {",
    codeSubB_A_extra_code5:
      '  const jokes = useFetch("https://example.app/api/jokes");',
    codeSubB_A_extra_code7: "  return (",
    codeSubB_A_extra_code9: "    <ul>",
    codeSubB_A_extra_code11: "       {jokes?.map(({ id, joke }) => (",
    codeSubB_A_extra_code13: "         <li key={id}>{joke}</li>",
    codeSubB_A_extra_code15: "       ))}",
    codeSubB_A_extra_code17: "    </ul>",
    codeSubB_A_extra_code19: "  );",
    codeSubB_A_extra_code21: "}",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A: "",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "When should you create a custom hook?",
    subIntro_B:
      "Custom hooks serve as potent tools for abstracting recurring logic, but their creation is warranted only when the logic is reusable across multiple components. For logic exclusive to a single component, it's preferable to keep it within the component itself. A rule of thumb: If you use something only once, avoid abstraction; if twice, consider abstracting.",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Reusing Logic with Custom Hooks",
      "https://react.dev/learn/reusing-logic-with-custom-hooks",
    ],
  },
  // -------------------------------------------------------11 global state
  {
    _id: 11,
    link: "global-state",
    title: "Global State & Zustand",
    intro:
      "In various scenarios, when a state existing in one component is required in another, it's essential for these components to have a shared state. The solution involves elevating the state up the component hierarchy to the first common parent component, known as 'lifting state up.' ",
    moreIntro:
      "Subsequently, state variables or functions for state changes are passed down to lower-level components through props. Prop drilling refers to the situation where individual components, along with their shared ancestor where the state is defined, may be distant in the component hierarchy. As a result, state variables need to be passed through multiple components via props until they reach the intended target component. Prop drilling through a few levels is perfectly fine. However, if the path gets longer and several state variables are passed via props, the complexity increases and the maintainability of the code is reduced. On the way, passing each prop must not be forgotten in any component.",
    codeA: "function App() ",
    codeA_extra_code1:
      " const [userIsLoggedIn, setUserIsLoggedIn] = useState(false);",
    codeA_extra_code2:
      " return <ProductsPage userIsLoggedIn={userIsLoggedIn} />;",
    codeA_extra_code3: "}",
    codeA_extra_code4: " ",
    codeA_extra_code5: "function ProductsPage({ userIsLoggedIn }) {",
    codeA_extra_code6:
      " return <ProductsList userIsLoggedIn={userIsLoggedIn} />;",
    codeA_extra_code7: "}",
    codeA_extra_code8: " ",
    codeA_extra_code9: "function ProductsList({ userIsLoggedIn }) {",
    codeA_extra_code11: " return products.map((product) => (",
    codeA_extra_code12:
      "  <ProductCard {...product} userIsLoggedIn={userIsLoggedIn} />",
    codeA_extra_code13: "  ));",
    codeA_extra_code14: "}",
    codeA_extra_code15: "function ProductCard({ userIsLoggedIn }) ",
    codeA_extra_code16:
      " return <ProductActions userIsLoggedIn={userIsLoggedIn} />;",
    codeA_extra_code17: "}",
    codeA_extra_code18: " ",
    codeA_extra_code19: "function ProductActions({ userIsLoggedIn }) {",
    codeA_extra_code20: "return userIsLoggedIn ? (",
    codeA_extra_code21: "<button>One-click Buy</button>",
    codeA_extra_code23: " ) : (",
    codeA_extra_code25: "<button>Add to Basket</button>",
    codeA_extra_code27: " );",
    codeA_extra_code29: "}",
    codeB: "",
    codeB_extra_code1: "",
    codeB_extra_code2: "",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Naming conventions for props and functions",
    subIntro:
      "When dealing with prop drilling, avoid renaming props midway. Renaming a prop can lead to a loss of logical reference, complicating code comprehension.",
    moreSubIntro:
      " While it's advisable to prefix function names and their corresponding props with 'on' there's no necessity to rename drilled props in each intervening component. Opt for a clearer solution like this:",
    codeSubA: "function App() {",
    codeSubA_extra_code1:
      " const [userIsLoggedIn, setUserIsLoggedIn] = useState(false);",
    codeSubA_extra_code3: " function handleLogIn() {",
    codeSubA_extra_code5: "   setUserIsLoggedIn(true);",
    codeSubA_extra_code7: " }",
    codeSubA_extra_code8: " return <Layout handleLogIn={handleLogIn} />;",
    codeSubA_extra_code11: "}",
    codeSubA_extra_code12: " ",
    codeSubA_extra_code13: "function Layout({ handleLogIn }) {",
    codeSubA_extra_code16: " return <Header onLogIn={handleLogIn} />;",
    codeSubA_extra_code17: "}",
    codeSubA_extra_code19: " ",
    codeSubA_extra_code21: "function Header({ onLogIn }) {",
    codeSubA_extra_code22: " return <button onClick={onLogIn}>Log In</button>;",
    codeSubA_extra_code25: "}",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA: "",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "State management libraries: 'Zustand'",
    subIntro_A:
      'In React, various libraries simplify handling complex state. To address prop drilling, "global state" keeps state outside components, accessible by each. Consider "zustand" for a streamlined implementation, eliminating the need to pass state down through props.',
    moreSubIntro_A: "",
    codeSubA_A: "import { create } from 'zustand';",
    codeSubA_A_extra_code2: "const useUserStore = create((set) => ({",
    codeSubA_A_extra_code4: "  isLoggedIn: false,",
    codeSubA_A_extra_code6: "  logIn: () => set(() => ({ isLoggedIn: true })),",
    codeSubA_A_extra_code8:
      "  logOut: () => set(() => ({ isLoggedIn: false })), ",
    codeSubA_A_extra_code10: "}));",
    codeSubA_A_extra_code11: " ",
    codeSubA_A_extra_code13: "function App() { return <ProductsPage />};",
    codeSubA_A_extra_code15:
      "function ProductsPage() { return <ProductsList />};",
    codeSubA_A_extra_code17:
      "function ProductsList() { return products.map((product) => <ProductCard {...product} />)};",
    codeSubA_A_extra_code19:
      "function ProductCard() { return <ProductActions />};",
    codeSubA_A_extra_code20: " ",
    codeSubA_A_extra_code21: "function ProductActions() { ",
    codeSubA_A_extra_code22:
      "   const userIsLoggedIn = useUserStore((state) => state.isLoggedIn);",
    codeSubA_A_extra_code25:
      "   return userIsLoggedIn ? (  <button>One-click Buy</button>  ) : ( <button>Add to Basket</button> ); ",
    codeSubA_A_extra_code27: "}",

    codeSubB_A: "",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "",
    codeSubB_A_extra_code3: "",
    codeSubB_A_extra_code4: "",
    codeSubB_A_extra_code5: "",
    codeSubB_A_extra_code6: "",
    codeSubB_A_extra_code7: "",
    codeSubB_A_extra_code8: "",
    codeSubB_A_extra_code9: "",
    codeSubB_A_extra_code10: "",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "While using global state, avoid storing all data there; it's crucial to discern which data truly needs global access. Reserve global state for such data, and for state specific to a component or section, define it locally and pass it through props",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: ["Zustand on GitHub", "https://github.com/pmndrs/zustand"],
  },
  // -------------------------------------------------------12 inmu-state
  {
    _id: 12,
    link: "inmu-state",
    title: "Inmutable State & useImmer",
    intro:
      "We have already discussed this in the section on Avoiding State Mutation, As you have learned you cannot change (mutate) data stored in state directly. You have to treat the state as read only. To change state you call the setter function and pass the complete next state.",
    moreIntro:
      "This code (below) won't work as expected—it directly mutates the state object. To ensure proper functionality, make a copy of the data using the spread syntax and apply changes to the copy instead of mutating the original state object.",
    codeA: "const [user, setUser] = useState({",
    codeA_extra_code1: '  name: "Jane Doe",',
    codeA_extra_code3: '  email: "jane@doe.com",',
    codeA_extra_code5: "});",
    codeA_extra_code6: "// ❌ direct state mutation: don't try this !!!",
    codeA_extra_code7: 'user.email = "jane_doe@example.com";',
    codeA_extra_code9: "setUser(user);",
    codeA_extra_code10: "// ✅ Better:",
    codeA_extra_code13: "setUser({",
    codeA_extra_code15: "  ...user,",
    codeA_extra_code17: '  email: "jane_doe@example.com",',
    codeA_extra_code19: "});",
    codeB: "",
    codeB_extra_code1: "",
    codeB_extra_code2: "",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Updating nested states",
    subIntro:
      "It can get a bit complicated when you need to change data in a deeper nested state.",
    moreSubIntro: "",
    codeSubA: "const [user, setUser] = useState({",
    codeSubA_extra_code1: '  name: "Jane Doe",',
    codeSubA_extra_code3: "  contact: {",
    codeSubA_extra_code5: '   email: "jane@doe.com",  ',
    codeSubA_extra_code7: "   phone: {",
    codeSubA_extra_code9: '     mobile: "+0099999999",',
    codeSubA_extra_code11: "   },",
    codeSubA_extra_code13: "  },",
    codeSubA_extra_code15: "});",
    codeSubB: "//When user.contact.phone.mobile should be changed",
    codeSubB_extra_code1: "setUser({",
    codeSubB_extra_code3: "  ...user,",
    codeSubB_extra_code5: "  contact: {",
    codeSubB_extra_code7: "    ...user.contact,",
    codeSubB_extra_code9: "    phone: {",
    codeSubB_extra_code11: "      ...user.contact.phone,",
    codeSubB_extra_code13: '      mobile: "+00777777777"',
    codeSubB_extra_code15: "    },",
    codeSubB_extra_code17: "  },",
    codeSubB_extra_code19: "});",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "While the current code functions well, updating a single value requires extensive code. Enter the immer library for efficiently handling nested state updates. Immer simplifies the process by creating a complete copy of the previous state, serving as a draft for the next state. As it's a copy, you can apply mutations freely, and immer ensures seamless state updates.",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB: "",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Using immer in React: useImmer hook",
    subIntro_A:
      "The useImmer hook seamlessly integrates immer into React components.",
    moreSubIntro_A:
      'Instead of using useState for state declaration, employ useImmer. Prefix the returned function with "update" instead of "set". The previous example transforms as follows when utilizing the useImmer hook. When you call the update function, you pass a callback. The callback receives a draft for the next state as parameter. You can apply mutations to the draft directly.',
    codeSubA_A: "// useState → useImmer",
    codeSubA_A_extra_code1: "// setUser → updateUser",
    codeSubA_A_extra_code2: "const [user, updateUser] = useImmer({",
    codeSubA_A_extra_code3: '  name: "Jane Doe",',
    codeSubA_A_extra_code5: "  contact: {",
    codeSubA_A_extra_code7: '    email: "jane@doe.com",',
    codeSubA_A_extra_code9: "    phone: {",
    codeSubA_A_extra_code11: '      mobile: "+0099999999",',
    codeSubA_A_extra_code13: "    },",
    codeSubA_A_extra_code15: "  },",
    codeSubA_A_extra_code17: "});",
    codeSubB_A: "updateUser((draft) => {",
    codeSubB_A_extra_code1: "",
    codeSubB_A_extra_code2: "   // Mutate the draft directly",
    codeSubB_A_extra_code4: '   draft.contact.phone.mobile = "+0077777777";',

    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "Working with objects in arrays: The examples above focusses on mutations in an object. However, in many applications you are likely to work with objects nested in arrays",
    codeTextAA_A: "const [users, setUsers] = useState([",
    codeTextAA_A_extra_code1: " {",
    codeTextAA_A_extra_code3: "  id: 1,",
    codeTextAA_A_extra_code5: '  name: "Jane Doe",',
    codeTextAA_A_extra_code7: '  email: "jane@doe.com"',
    codeTextAA_A_extra_code9: " },",
    codeTextAA_A_extra_code11: " {",
    codeTextAA_A_extra_code13: "  id: 2,",
    codeTextAA_A_extra_code15: '  name: "John Doe",',
    codeTextAA_A_extra_code17: '  email: "john@doe.com",',
    codeTextAA_A_extra_code19: " },",
    codeTextAA_A_extra_code21: "]);",
    codeTextAB_A:
      "//You can perform an update to change the email of a user with the id of 1 like this:",
    codeTextAB_A_extra_code1: "setUsers(",
    codeTextAB_A_extra_code3: "  users.map((user) =>",
    codeTextAB_A_extra_code5: "    user.id === 1",
    codeTextAB_A_extra_code7: "      ? {",
    codeTextAB_A_extra_code9: "           ...user,",
    codeTextAB_A_extra_code11: '           email: "jane_doe@example.com",',
    codeTextAB_A_extra_code13: "        }",
    codeTextAB_A_extra_code15: "      : user",
    codeTextAB_A_extra_code17: "  )",
    codeTextAB_A_extra_code19: ");",
    codeTextAC_A:
      "//The same operation with the update function by the useImmer:",
    codeTextAC_A_extra_code1: "updateUsers((draft) => {",
    codeTextAC_A_extra_code2:
      "  const user = draft.find(user => user.id === 1);",
    codeTextAC_A_extra_code3: '  user.email = "jane_doe@example.com";',
    codeTextAC_A_extra_code4: "})",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A:
      "The code you write varies based on the operation type (update, insert, delete) and the data structure in your state. The decision to use immer depends on personal preference and the data complexity. For deeply nested structures, immer can simplify your code.",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "",
    subIntro_B: "",
    moreSubIntro_B: "",
    codeSubA_B: "",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "",
    codeSubA_B_extra_code3: "",
    codeSubA_B_extra_code4: "",
    codeSubA_B_extra_code5: "",
    codeSubA_B_extra_code6: "",
    codeSubA_B_extra_code7: "",
    codeSubA_B_extra_code8: "",
    codeSubA_B_extra_code9: "",
    codeSubA_B_extra_code10: "",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "Updating Objects in State",
      "https://react.dev/learn/updating-objects-in-state",
    ],
    externalLinksA: [
      "useImmer hook GitHub",
      "https://github.com/immerjs/use-immer",
    ],
    externalLinksA: [
      "Immer: update patterns",
      "https://immerjs.github.io/immer/update-patterns/",
    ],
  },
  // -------------------------------------------------------13 fetchinhg
  {
    _id: 13,
    link: "fetching",
    title: "Data Fetching & SWR",
    intro:
      "While you can use the useEffect hook for data fetching, it requires manual handling of tasks such as caching, programmatically refetching, error and loading state implementation, interval fetching, and more. A library like SWR streamlines these tasks, offering convenient shortcuts.",
    moreIntro:
      "In order to use the useSWR hook, you first need to create a fetcher function, which is just a wrapper of the native fetch. A basic example recommended by the docs looks see you below. Then you can import the useSWR hook and pass it two argument: the url you want to fetch and the fetcher function. useSWR returns a data object you can use in your JSX. Note that useSWR returns an object from which here we destructure data. This is why we cannot simply call the data object as we like, but have to rename it according to destructuring rules: { data: person }.  ",
    codeA: "import useSWR from 'swr'",
    codeA_extra_code2:
      "const fetcher = (...args) => fetch(...args).then((res) => res.json());",
    codeA_extra_code3: "function Character() {",
    codeA_extra_code4:
      '  const { data } = useSWR("https://example.app/api/people/1", fetcher);',
    codeA_extra_code7: "  return <div>Hello {data.name}!</div>;",
    codeA_extra_code9: "}",
    codeB: "",
    codeB_extra_code1: "",
    codeB_extra_code2: "",
    codeB_extra_code3: "",
    codeB_extra_code4: "",
    codeB_extra_code5: "",
    codeB_extra_code6: "",
    codeB_extra_code7: "",
    codeB_extra_code8: "",
    codeB_extra_code9: "",
    codeB_extra_code10: "",
    codeC: "",
    codeC_extra_code1: "",
    codeC_extra_code2: "",
    codeC_extra_code3: "",
    codeC_extra_code4: "",
    codeC_extra_code5: "",
    codeC_extra_code6: "",
    codeC_extra_code7: "",
    codeC_extra_code8: "",
    codeC_extra_code9: "",
    codeC_extra_code10: "",
    subtitle: "Configuring SWR",
    subIntro:
      "It can be useful to set some application-wide configuration for SWR. You can do so by passing an config object to the SWRConfig component in your App. The following example sets an application wide fetcher function and an application wide refreshInterval",
    moreSubIntro:
      "Setting an application-wide fetcher function is very convenient if you want to use the same fetcher function in many places",
    codeSubA: "import { SWRConfig } from 'swr';",
    codeSubA_extra_code2:
      "const fetcher = (...args) => fetch(...args).then((res) => res.json());",
    codeSubA_extra_code3: "function App() {",
    codeSubA_extra_code5: "  return (",
    codeSubA_extra_code6:
      "    <SWRConfig value={{ fetcher, refreshInterval: 1000,}}>",
    codeSubA_extra_code9: "        {/* … your app */}",
    codeSubA_extra_code11: "    </SWRConfig>",
    codeSubA_extra_code13: "  );",
    codeSubA_extra_code15: "}",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "SWR Response API: The useSWR hook returns an SWR response object with the following properties: data(The data fetched for the given key (URL)), error (An error object if the fetcher function threw an error), isLoading(true if the data is being loaded for the first time), isValidating (true if there is any request or revalidation loading) and mutate() (A function to mutate the data). With isLoading (for initial data loading) and isValidating (whenever data is reloaded) states, allow you to create corresponding UI outputs. Destructure these states, similar to the data object, and use them for conditional JSX returns: ",
    codeTextAA: "function Character() {",
    codeTextAA_extra_code2:
      "  const { data, error, isLoading, isValidating } = useSWR(",
    codeTextAA_extra_code3: '    "https://example.app/api/people/1"',
    codeTextAA_extra_code5: "  );",
    codeTextAA_extra_code6: "  if (error) return <div>failed to load</div>;",
    codeTextAA_extra_code8: "  if (isLoading) return <div>loading...</div>;",
    codeTextAA_extra_code11: "  return (",
    codeTextAA_extra_code13: "    <div>",
    codeTextAA_extra_code14:
      '       <span role="img" aria-label={isValidating ? "Validating" : "Ready"}>',
    codeTextAA_extra_code16: '         {isValidating ? "🔄" : "✅"}',
    codeTextAA_extra_code17: "       </span>",
    codeTextAA_extra_code19: "       Hello {data.name}!",
    codeTextAA_extra_code21: "    </div>",
    codeTextAA_extra_code23: "  );",
    codeTextAA_extra_code25: "}",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB:
      "The fetcher function provided doesn't throw an Error object for non-ok responses. SWR recognizes errors when an Error object is thrown, and it's then placed into the error property of the hook's return object. Customize the fetcher to throw an Error with additional information for improved handling.",
    codeTextBA: "const fetcher = async (url) => {",
    codeTextBA_extra_code1: "  const res = await fetch(url);",
    codeTextBA_extra_code2:
      "  // If the status code is not in the range 200-299,",
    codeTextBA_extra_code4: "  // we still try to parse and throw it.",
    codeTextBA_extra_code5: "  if (!res.ok) {",
    codeTextBA_extra_code7:
      '     const error = new Error("An error occurred while fetching the data.");',
    codeTextBA_extra_code8: "     // Attach extra info to the error object.",
    codeTextBA_extra_code9: "     error.info = await res.json();",
    codeTextBA_extra_code11: "     error.status = res.status;",
    codeTextBA_extra_code13: "     throw error;",
    codeTextBA_extra_code15: "  }",
    codeTextBA_extra_code17: "  return res.json();",
    codeTextBA_extra_code19: "};",
    codeTextBB:
      "//You can use the error object to display a more detailed error message (message is the string from new Error()):",
    codeTextBB_extra_code1: "function Character() {",
    codeTextBB_extra_code3:
      '  const { data, error, isLoading } = useSWR("https://example.app/api/people/1");',
    codeTextBB_extra_code4: "  if (error) return <div>{error.message}</div>;",
    codeTextBB_extra_code7: "  if (isLoading) return <div>loading...</div>;",
    codeTextBB_extra_code9: "  return <div>Hello {data.name}!</div>;",
    codeTextBB_extra_code11: "}",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Fetch on Interval and Button Click",
    subIntro_A:
      "To refetch the API on interval, pass a refreshInterval value inside of an option object as an additional argument to the useSWR hook:. In the following example, SWR will refetch the API every second:",
    moreSubIntro_A:
      "To fetch data programmatically (like clicking a button), you can use the mutate function provided by the useSWR hook",
    codeSubA_A:
      'useSWR("https://example.app/api/people/1", { refreshInterval: 1000 });',
    codeSubA_A_extra_code1: "",
    codeSubA_A_extra_code2: "",
    codeSubA_A_extra_code3: "",
    codeSubA_A_extra_code4: "",
    codeSubA_A_extra_code5: "",
    codeSubA_A_extra_code6: "",
    codeSubA_A_extra_code7: "",
    codeSubA_A_extra_code8: "",
    codeSubA_A_extra_code9: "",
    codeSubA_A_extra_code10: "",
    codeSubB_A: "function Character() {",
    codeSubB_A_extra_code1:
      'const { data, mutate } = useSWR("https://example.app/api/people/1");',
    codeSubB_A_extra_code1:
      " return <RefetchButton onRefetch={() => mutate()}>Refetch data</RefetchButton>;",
    codeSubB_A_extra_code3: "}",
    codeSubB_A_extra_code5: " ",
    codeSubB_A_extra_code7: "function RefetchButton({ children, onRefetch }) {",
    codeSubB_A_extra_code9: "  return (",
    codeSubB_A_extra_code11: '    <button type="button" onClick={onRefetch}>',
    codeSubB_A_extra_code13: "      {children}",
    codeSubB_A_extra_code15: "    </button>",
    codeSubB_A_extra_code17: "  );",
    codeSubB_A_extra_code19: "}",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A:
      "Data is Cached: SWR caches fetched data in the browser's memory. When you request the same data again, it's retrieved from the cache rather than the network. This allows you to use the useSWR hook across your app without concerns about redundant data fetching",
    codeTextAA_A: "function CharacterName() {",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2:
      '  const { data } = useSWR("https://example.app/api/people/1");',
    codeTextAA_A_extra_code3: "  return <div>Hello {data.name}!</div>;",
    codeTextAA_A_extra_code5: "}",
    codeTextAA_A_extra_code7: "function CharacterHairColor() { ",
    codeTextAA_A_extra_code8:
      '  const { data } = useSWR("https://example.app/api/people/1");',
    codeTextAA_A_extra_code9:
      "  return <div>Her hair color is {data.hair_color}.</div>;",
    codeTextAA_A_extra_code11: "}",
    codeTextAA_A_extra_code12: " ",
    codeTextAA_A_extra_code13: "function App() {",
    codeTextAA_A_extra_code15: " return (",
    codeTextAA_A_extra_code17: "  <>",
    codeTextAA_A_extra_code19: "    <CharacterName />",
    codeTextAA_A_extra_code21: "    <CharacterHairColor />",
    codeTextAA_A_extra_code23: "  </>",
    codeTextAA_A_extra_code25: " );",
    codeTextAA_A_extra_code27: "}",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A:
      "The app fetches the data just once, despite employing the useSWR hook thrice.Furthermore, manually mutating the data triggers revalidation, updating the cache. Consequently, the modified data becomes accessible to all components using the useSWR hook with the same key (URL). This holds true even if mutate is called from a different component, as long as they share the same key (URL):",
    codeTextBA_A: "function RevalidateButton() {",
    codeTextBA_A_extra_code1:
      '  const { mutate } = useSWR("https://example.app/api/people/1");',
    codeTextBA_A_extra_code3: "  return (",
    codeTextBA_A_extra_code5:
      '    <button type="button" onClick={() => mutate()}>',
    codeTextBA_A_extra_code7: "      Revalidate",
    codeTextBA_A_extra_code11: "    </button>",
    codeTextBA_A_extra_code13: "  );",
    codeTextBA_A_extra_code15: "}",
    codeTextBB_A: "// … other components",
    codeTextBB_A_extra_code1: "function App() {",
    codeTextBB_A_extra_code3: "  return (",
    codeTextBB_A_extra_code5: "    <>",
    codeTextBB_A_extra_code7: "      <CharacterName />",
    codeTextBB_A_extra_code9: "      <CharacterHairColor />",
    codeTextBB_A_extra_code10: "      <RevalidateButton />",
    codeTextBB_A_extra_code11: "    </>",
    codeTextBB_A_extra_code13: "  );",
    codeTextBB_A_extra_code15: "}",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "Combine Fetched Data with Local State",
    subIntro_B:
      "SWR handles the state containing fetched data, preventing direct modifications—a positive approach to maintain the server data as the single source of truth. Modifying server-fetched state directly is an anti-pattern.",
    moreSubIntro_B:
      'For local state enrichment, like adding an "isFavorite" property to a movie, utilize the useSWR hook for data fetching and the useState hook for managing local state. Ensure the local state is linked to the server data through a unique identifier, such as an "id" or "slug."',
    codeSubA_B: "function Movies() {",
    codeSubA_B_extra_code1:
      "/* let's assume the API return a list of movies with id, title and year als propierties",
    codeSubA_B_extra_code2:
      'const { data: moviesData } = useSWR("/api/movies");',
    codeSubA_B_extra_code3: "const [moviesInfo, setMoviesInfo] = useState([]);",
    codeSubA_B_extra_code4: " function handleToggleFavorite(id) {",
    codeSubA_B_extra_code5: "  setMoviesInfo((moviesInfo) => {",
    codeSubA_B_extra_code7:
      "    const info = moviesInfo.find((info) => info.id === id);",
    codeSubA_B_extra_code9: "    if (info) {",
    codeSubA_B_extra_code10: "      return moviesInfo.map((info) =>",
    codeSubA_B_extra_code11:
      "        info.id === id ? { ...info, isFavorite: !info.isFavorite } : info",
    codeSubA_B_extra_code12: "     );",
    codeSubA_B_extra_code13: "   }",
    codeSubA_B_extra_code14:
      "   return [...moviesInfo, { id, isFavorite: true }];",
    codeSubA_B_extra_code15: "  });",
    codeSubA_B_extra_code16: " };",
    codeSubA_B_extra_code17: " return (",
    codeSubA_B_extra_code18: "     <ul>",
    codeSubA_B_extra_code19:
      "       {moviesData.map(({ id, title, year }) => {const { isFavorite } = moviesInfo.find((info) => info.id === id) ?? { isFavorite: false };",
    codeSubA_B_extra_code20: "         return (",
    codeSubA_B_extra_code21: "             <li key={id}> {title} ({year})",
    codeSubA_B_extra_code22:
      '               <button type="button" onClick={handleToggleFavorite(id)}>',
    codeSubA_B_extra_code23:
      '                 {isFavorite ? "Remove from favorites" : "Add to favorites"}',
    codeSubA_B_extra_code24: "               </button>",
    codeSubA_B_extra_code25: "             </li>",
    codeSubA_B_extra_code26: "         );",
    codeSubA_B_extra_code27: "       })}",
    codeSubA_B_extra_code28: "     </ul>",
    codeSubA_B_extra_code29: " );",
    codeSubA_B_extra_code30: "}",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B:
      "In this pattern, your local state is ad-hoc, so attempting to find a movie in the state array might return undefined. To address this, we utilize the ?? operator, defaulting to { isFavorite: false } if the movie is not in the state. If you opt for Immer and useImmer, the update code can be simplified:",
    codeTextAA_B: "function handleToggleFavorite(id) {",
    codeTextAA_B_extra_code1: " updateMoviesInfo((draft) => {",
    codeTextAA_B_extra_code3:
      "  const info = draft.find((info) => info.id === id);",
    codeTextAA_B_extra_code5: "  if (info) {",
    codeTextAA_B_extra_code7: "    info.isFavorite = !info.isFavorite;",
    codeTextAA_B_extra_code9: "  } else {",
    codeTextAA_B_extra_code11: "    draft.push({ id, isFavorite: true });",
    codeTextAA_B_extra_code13: "  }",
    codeTextAA_B_extra_code15: " });",
    codeTextAA_B_extra_code17: "}",
    codeTextAA_B_extra_code19: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: ["SWR Docs", "https://swr.vercel.app/docs/getting-started"],
    externalLinksB: ["SWR features", "https://swr.vercel.app/#features"],
    externalLinksC: [
      "Revalidate on Interval",
      "https://swr.vercel.app/docs/revalidation#revalidate-on-interval",
    ],
    externalLinksD: [
      "Status Code and Error Object",
      "https://swr.vercel.app/docs/error-handling#status-code-and-error-object",
    ],
  },
  // -------------------------------------------------------14 testing
  {
    _id: 15,
    link: "testing",
    title: "Testing & Jest",
    intro:
      "Testing the frontend is essential for bug detection before user exposure. Manual UI testing is time-consuming and unreliable. Component tests automate rendering and interactions, mimicking user behavior: search for a heading with specific content, locate input fields with labels and input text, find a button with a label and click to submit or check expected results post-submission  ",
    moreIntro:
      "Written for each React component, these tests form part of integration testing. Unlike full app testing, component tests focus on individual units working together. Organize tests in .test.js files alongside component files for clarity.",
    codeA: "import { useState } from 'react';",
    codeA_extra_code1: "export default function FahrenheitConverter() {",
    codeA_extra_code2: "  const [fahrenheit, setFahrenheit] = useState();",
    codeA_extra_code3: "  function handleSubmit(event) {",
    codeA_extra_code4: "    event.preventDefault();",
    codeA_extra_code5: "    const form = event.target;",
    codeA_extra_code6: "    const formElements = form.elements;",
    codeA_extra_code7: "    const celsius = formElements.celsius.value;",
    codeA_extra_code8: "    setFahrenheit((celsius * 9) / 5 + 32);    ",
    codeA_extra_code9: "  }",
    codeA_extra_code10: " return (",
    codeA_extra_code11: "    <div>",
    codeA_extra_code12: "     <form onSubmit={handleSubmit}>",
    codeA_extra_code13: '       <label htmlFor="celsius">°C</label>',
    codeA_extra_code14:
      '       <input type="number" id="celsius" name="celsius" />',
    codeA_extra_code15: "       <button>Convert to Fahrenheit</button>",
    codeA_extra_code16: "     </form>",
    codeA_extra_code17: "     {fahrenheit ? (",
    codeA_extra_code18: "       <output>{fahrenheit} °F</output>",
    codeA_extra_code19: "       ) : (",
    codeA_extra_code20: "       <p>Please enter a Celsius value and submit</p>",
    codeA_extra_code21: "     )}",
    codeA_extra_code22: "    </div>",
    codeA_extra_code23: "  );",
    codeB:
      "//FahrenheitConverter.test.js: There are three tests for this component  ",
    codeB_extra_code1:
      "import { render, screen } from '@testing-library/react';",
    codeB_extra_code3: "import userEvent from '@testing-library/user-event';",
    codeB_extra_code5: "import FahrenheitConverter from '.';",
    codeB_extra_code6: "//1. Test that the heading is displayed",
    codeB_extra_code7: 'test("renders a heading", () => {',
    codeB_extra_code9: "  render(<TemperatureUnitConverter />);",
    codeB_extra_code11: '  const heading = screen.getByRole("heading", {',
    codeB_extra_code13: "    name: /temperature unit converter/i,",
    codeB_extra_code15: "  });",
    codeB_extra_code17: "  expect(heading).toBeInTheDocument();",
    codeB_extra_code19: "});",
    codeB_extra_code20:
      "//2.Test that the fallback message is displayed before the form has been submitted",
    codeB_extra_code21:
      'test("renders a fallback message if form is not yet submitted", () => {',
    codeB_extra_code23: "  render(<FahrenheitConverter />)",
    codeB_extra_code25:
      "  const message = screen.getByText(/please enter a celsius value and submit/i);",
    codeB_extra_code27: "  expect(message).toBeInTheDocument();",
    codeB_extra_code29: "});",
    codeC: " ",
    codeC_extra_code1: "",
    codeC_extra_code2:
      "//3. Test that the form interaction and submit works and the result is calculated correctly and displayed instead of the fallback message.",
    codeC_extra_code3:
      'test("converts Celsius to Fahrenheit and renders the result", async () => {',
    codeC_extra_code5: "  const user = userEvent.setup();",
    codeC_extra_code7: "  render(<FahrenheitConverter />);",
    codeC_extra_code9: "  const input = screen.getByLabelText(/°C/i)",
    codeC_extra_code11: "  expect(input).toBeInTheDocument();",
    codeC_extra_code13:
      '  const button = screen.getByRole("button", { name: /convert to fahrenheit/i });',
    codeC_extra_code15: "  expect(button).toBeInTheDocument();",
    codeC_extra_code17: '  await user.type(input, "5");',
    codeC_extra_code19: "  await user.click(button);",
    codeC_extra_code21: "  const output = screen.getByText(/41 °F/i);",
    codeC_extra_code23: "  expect(output).toBeInTheDocument();",
    codeC_extra_code25:
      "  const message = screen.queryByText(/please enter a celsius value and submit/i);",
    codeC_extra_code27: "  expect(message).not.toBeInTheDocument();",
    codeC_extra_code29: "});",

    subtitle: "Rendering a component",
    subIntro:
      "Render the FahrenheitConverter component with the initial render method, then access the generated HTML using the screen method. Employ screen to utilize queries for specific HTML elements: ByRole (Search by role/aria-* attribute.), ByLabelText(Locate by label), ByText (Find by text) and  ByTestId (Use for elements without other queries) .  ",
    moreSubIntro:
      'Use getBy for immediate failure on non-found elements. For non-display tests, use queryBy, returning null instead of an immediate failure.Define text with getByText("Text Here") or slashes with an "i" for case insensitivity, like getByText(/text here/i). This approach ensures resilience to implementation changes. The enclosed expression in slashes is a regular expression, useful but not necessary to understand deeply for tests. Utilize the Testing Playground for query ease.  ',
    codeSubA: "",
    codeSubA_extra_code1: "",
    codeSubA_extra_code2: "",
    codeSubA_extra_code3: "",
    codeSubA_extra_code4: "",
    codeSubA_extra_code5: "",
    codeSubA_extra_code6: "",
    codeSubA_extra_code7: "",
    codeSubA_extra_code8: "",
    codeSubA_extra_code9: "",
    codeSubA_extra_code10: "",
    codeSubB: "",
    codeSubB_extra_code1: "",
    codeSubB_extra_code2: "",
    codeSubB_extra_code3: "",
    codeSubB_extra_code4: "",
    codeSubB_extra_code5: "",
    codeSubB_extra_code6: "",
    codeSubB_extra_code7: "",
    codeSubB_extra_code8: "",
    codeSubB_extra_code9: "",
    codeSubB_extra_code10: "",
    codeSubC: "",
    codeSubC_extra_code1: "",
    codeSubC_extra_code2: "",
    codeSubC_extra_code3: "",
    codeSubC_extra_code4: "",
    codeSubC_extra_code5: "",
    codeSubC_extra_code6: "",
    codeSubC_extra_code7: "",
    codeSubC_extra_code8: "",
    codeSubC_extra_code9: "",
    codeSubC_extra_code10: "",
    textA:
      "Simulate User Events: Simulate user interactions by setting up a virtual user with userEvent.setup(). Use it to simulate events like typing or clicking, and remember to employ await with user events. ",
    codeTextAA: "",
    codeTextAA_extra_code1: "",
    codeTextAA_extra_code2: "",
    codeTextAA_extra_code3: "",
    codeTextAA_extra_code4: "",
    codeTextAA_extra_code5: "",
    codeTextAA_extra_code6: "",
    codeTextAA_extra_code7: "",
    codeTextAA_extra_code8: "",
    codeTextAA_extra_code9: "",
    codeTextAA_extra_code10: "",
    codeTextAB: "",
    codeTextAB_extra_code1: "",
    codeTextAB_extra_code2: "",
    codeTextAB_extra_code3: "",
    codeTextAB_extra_code4: "",
    codeTextAB_extra_code5: "",
    codeTextAB_extra_code6: "",
    codeTextAB_extra_code7: "",
    codeTextAB_extra_code8: "",
    codeTextAB_extra_code9: "",
    codeTextAB_extra_code10: "",
    codeTextAC: "",
    codeTextAC_extra_code1: "",
    codeTextAC_extra_code2: "",
    codeTextAC_extra_code3: "",
    codeTextAC_extra_code4: "",
    codeTextAC_extra_code5: "",
    codeTextAC_extra_code6: "",
    codeTextAC_extra_code7: "",
    codeTextAC_extra_code8: "",
    codeTextAC_extra_code9: "",
    codeTextAC_extra_code10: "",
    textB:
      "Matchers: Utilize matchers with expect to express expected test results, following the unit testing concept. In component tests, additional matchers are available for the HTML generated. The toBeInTheDocument matcher is commonly used. ",
    codeTextBA: "",
    codeTextBA_extra_code1: "",
    codeTextBA_extra_code2: "",
    codeTextBA_extra_code3: "",
    codeTextBA_extra_code4: "",
    codeTextBA_extra_code5: "",
    codeTextBA_extra_code6: "",
    codeTextBA_extra_code7: "",
    codeTextBA_extra_code8: "",
    codeTextBA_extra_code9: "",
    codeTextBA_extra_code10: "",
    codeTextBB: "",
    codeTextBB_extra_code1: "",
    codeTextBB_extra_code2: "",
    codeTextBB_extra_code3: "",
    codeTextBB_extra_code4: "",
    codeTextBB_extra_code5: "",
    codeTextBB_extra_code6: "",
    codeTextBB_extra_code7: "",
    codeTextBB_extra_code8: "",
    codeTextBB_extra_code9: "",
    codeTextBB_extra_code10: "",
    codeTextBC: "",
    codeTextBC_extra_code1: "",
    codeTextBC_extra_code2: "",
    codeTextBC_extra_code3: "",
    codeTextBC_extra_code4: "",
    codeTextBC_extra_code5: "",
    codeTextBC_extra_code6: "",
    codeTextBC_extra_code7: "",
    codeTextBC_extra_code8: "",
    codeTextBC_extra_code9: "",
    codeTextBC_extra_code10: "",
    subtitle_A: "Mocks in Testing",
    subIntro_A:
      "A mock is a substitute for an original function, often used in tests for: event-handler functions passed as props to a component and Replacing an imported package. ",
    moreSubIntro_A:
      "Mocks minimize dependencies in tests, creating a testable environment for components. Imagine a Counter component with two event-handler functions as props. In a test, verify if passed event-handler functions are called upon button clicks. Since you're testing only the component, not a complete app, pass a mock function. Create mock functions with jest.fn(), providing a function for use with expect.",
    codeSubA_A: "export default function Counter({ onDecrease, onIncrease }) {",
    codeSubA_A_extra_code1: "  return (",
    codeSubA_A_extra_code3: "    <>",
    codeSubA_A_extra_code5: '      <button type="button" onClick={onDecrease}>',
    codeSubA_A_extra_code7: "         decrease",
    codeSubA_A_extra_code9: "      </button>",
    codeSubA_A_extra_code11:
      '      <button type="button" onClick={onIncrease}>',
    codeSubA_A_extra_code13: "         increase",
    codeSubA_A_extra_code15: "      </button>",
    codeSubA_A_extra_code17: "    </>",
    codeSubA_A_extra_code21: "  );",
    codeSubA_A_extra_code23: "}",
    codeSubB_A: "// test",
    codeSubB_A_extra_code1:
      'test("should call event-handler functions", async () => {',
    codeSubB_A_extra_code2: "   // Creates mock functions",
    codeSubB_A_extra_code3: "    const handleDecrease = jest.fn();",
    codeSubB_A_extra_code5: "    const handleIncrease = jest.fn();",
    codeSubB_A_extra_code7: "    const user = userEvent.setup();",
    codeSubB_A_extra_code9:
      "    render(<Counter onDecrease={handleDecrease} onIncrease={handleIncrease} />);",
    codeSubB_A_extra_code11:
      '    const decreaseButton = screen.getByRole("button", {name: /decrease/i,});',
    codeSubB_A_extra_code13:
      '    const increaseButton = screen.getByRole("button", {name: /increase/i,});',
    codeSubB_A_extra_code15: "    await user.click(increaseButton);",
    codeSubB_A_extra_code17: "    await user.click(decreaseButton);",
    codeSubB_A_extra_code19: "    await user.click(increaseButton);",
    codeSubB_A_extra_code21:
      "    expect(handleDecrease).toHaveBeenCalledTimes(1);",
    codeSubB_A_extra_code23:
      "    expect(handleIncrease).toHaveBeenCalledTimes(2);",
    codeSubB_A_extra_code25: "});",
    codeSubC_A: "",
    codeSubC_A_extra_code1: "",
    codeSubC_A_extra_code2: "",
    codeSubC_A_extra_code3: "",
    codeSubC_A_extra_code4: "",
    codeSubC_A_extra_code5: "",
    codeSubC_A_extra_code6: "",
    codeSubC_A_extra_code7: "",
    codeSubC_A_extra_code8: "",
    codeSubC_A_extra_code9: "",
    codeSubC_A_extra_code10: "",
    textA_A: "",
    codeTextAA_A: "",
    codeTextAA_A_extra_code1: "",
    codeTextAA_A_extra_code2: "",
    codeTextAA_A_extra_code3: "",
    codeTextAA_A_extra_code4: "",
    codeTextAA_A_extra_code5: "",
    codeTextAA_A_extra_code6: "",
    codeTextAA_A_extra_code7: "",
    codeTextAA_A_extra_code8: "",
    codeTextAA_A_extra_code9: "",
    codeTextAA_A_extra_code10: "",
    codeTextAB_A: "",
    codeTextAB_A_extra_code1: "",
    codeTextAB_A_extra_code2: "",
    codeTextAB_A_extra_code3: "",
    codeTextAB_A_extra_code4: "",
    codeTextAB_A_extra_code5: "",
    codeTextAB_A_extra_code6: "",
    codeTextAB_A_extra_code7: "",
    codeTextAB_A_extra_code8: "",
    codeTextAB_A_extra_code9: "",
    codeTextAB_A_extra_code10: "",
    codeTextAC_A: "",
    codeTextAC_A_extra_code1: "",
    codeTextAC_A_extra_code2: "",
    codeTextAC_A_extra_code3: "",
    codeTextAC_A_extra_code4: "",
    codeTextAC_A_extra_code5: "",
    codeTextAC_A_extra_code6: "",
    codeTextAC_A_extra_code7: "",
    codeTextAC_A_extra_code8: "",
    codeTextAC_A_extra_code9: "",
    codeTextAC_A_extra_code10: "",
    textB_A: "",
    codeTextBA_A: "",
    codeTextBA_A_extra_code1: "",
    codeTextBA_A_extra_code2: "",
    codeTextBA_A_extra_code3: "",
    codeTextBA_A_extra_code4: "",
    codeTextBA_A_extra_code5: "",
    codeTextBA_A_extra_code6: "",
    codeTextBA_A_extra_code7: "",
    codeTextBA_A_extra_code8: "",
    codeTextBA_A_extra_code9: "",
    codeTextBA_A_extra_code10: "",
    codeTextBB_A: "",
    codeTextBB_A_extra_code1: "",
    codeTextBB_A_extra_code2: "",
    codeTextBB_A_extra_code3: "",
    codeTextBB_A_extra_code4: "",
    codeTextBB_A_extra_code5: "",
    codeTextBB_A_extra_code6: "",
    codeTextBB_A_extra_code7: "",
    codeTextBB_A_extra_code8: "",
    codeTextBB_A_extra_code9: "",
    codeTextBB_A_extra_code10: "",
    codeTextBC_A: "",
    codeTextBC_A_extra_code1: "",
    codeTextBC_A_extra_code2: "",
    codeTextBC_A_extra_code3: "",
    codeTextBC_A_extra_code4: "",
    codeTextBC_A_extra_code5: "",
    codeTextBC_A_extra_code6: "",
    codeTextBC_A_extra_code7: "",
    codeTextBC_A_extra_code8: "",
    codeTextBC_A_extra_code9: "",
    codeTextBC_A_extra_code10: "",
    subtitle_B: "Testing Next.js (useRouter Mock)",
    subIntro_B:
      "Testing components with the useRouter hook from Next.js requires handling certain challenges. Tests run without a real browser, lacking the browser location API and the Next.js context for routing information across components. Since the useRouter hook needs the browser location API, it throws an error during tests.",
    moreSubIntro_B:
      "To test components using useRouter, create a mock—a substitute for the original function. Replace the useRouter hook with a mock, including the router's functions/properties the component uses. Keep the mock simple for functional tests. In the example, assume the tested component accesses router.asPath and calls router.push.",
    codeSubA_B: "import MyComponent from '.';",
    codeSubA_B_extra_code1: "",
    codeSubA_B_extra_code2: "/* ... likely more imports here ... */",
    codeSubA_B_extra_code3: 'jest.mock("next/router", () => ({',
    codeSubA_B_extra_code5: "  useRouter() {",
    codeSubA_B_extra_code7: "    return {",
    codeSubA_B_extra_code9: "      push: jest.fn(),",
    codeSubA_B_extra_code11: '      asPath: "/",',
    codeSubA_B_extra_code13: "    };",
    codeSubA_B_extra_code15: "  },",
    codeSubA_B_extra_code17: "}));",
    codeSubA_B_extra_code18: "  ",
    codeSubA_B_extra_code19: 'test("should render", () => {',
    codeSubA_B_extra_code20: "/* ... test here ... */",
    codeSubA_B_extra_code21: "});",
    codeSubA_B_extra_code22: "/* ... more tests ... */    ",
    codeSubB_B: "",
    codeSubB_B_extra_code1: "",
    codeSubB_B_extra_code2: "",
    codeSubB_B_extra_code3: "",
    codeSubB_B_extra_code4: "",
    codeSubB_B_extra_code5: "",
    codeSubB_B_extra_code6: "",
    codeSubB_B_extra_code7: "",
    codeSubB_B_extra_code8: "",
    codeSubB_B_extra_code9: "",
    codeSubB_B_extra_code10: "",
    codeSubC_B: "",
    codeSubC_B_extra_code1: "",
    codeSubC_B_extra_code2: "",
    codeSubC_B_extra_code3: "",
    codeSubC_B_extra_code4: "",
    codeSubC_B_extra_code5: "",
    codeSubC_B_extra_code6: "",
    codeSubC_B_extra_code7: "",
    codeSubC_B_extra_code8: "",
    codeSubC_B_extra_code9: "",
    codeSubC_B_extra_code10: "",
    textA_B: "",
    codeTextAA_B: "",
    codeTextAA_B_extra_code1: "",
    codeTextAA_B_extra_code2: "",
    codeTextAA_B_extra_code3: "",
    codeTextAA_B_extra_code4: "",
    codeTextAA_B_extra_code5: "",
    codeTextAA_B_extra_code6: "",
    codeTextAA_B_extra_code7: "",
    codeTextAA_B_extra_code8: "",
    codeTextAA_B_extra_code9: "",
    codeTextAA_B_extra_code10: "",
    codeTextAB_B: "",
    codeTextAB_B_extra_code1: "",
    codeTextAB_B_extra_code2: "",
    codeTextAB_B_extra_code3: "",
    codeTextAB_B_extra_code4: "",
    codeTextAB_B_extra_code5: "",
    codeTextAB_B_extra_code6: "",
    codeTextAB_B_extra_code7: "",
    codeTextAB_B_extra_code8: "",
    codeTextAB_B_extra_code9: "",
    codeTextAB_B_extra_code10: "",
    codeTextAC_B: "",
    codeTextAC_B_extra_code1: "",
    codeTextAC_B_extra_code2: "",
    codeTextAC_B_extra_code3: "",
    codeTextAC_B_extra_code4: "",
    codeTextAC_B_extra_code5: "",
    codeTextAC_B_extra_code6: "",
    codeTextAC_B_extra_code7: "",
    codeTextAC_B_extra_code8: "",
    codeTextAC_B_extra_code9: "",
    codeTextAC_B_extra_code10: "",
    textB_B: "",
    codeTextBA_B: "",
    codeTextBA_B_extra_code1: "",
    codeTextBA_B_extra_code2: "",
    codeTextBA_B_extra_code3: "",
    codeTextBA_B_extra_code4: "",
    codeTextBA_B_extra_code5: "",
    codeTextBA_B_extra_code6: "",
    codeTextBA_B_extra_code7: "",
    codeTextBA_B_extra_code8: "",
    codeTextBA_B_extra_code9: "",
    codeTextBA_B_extra_code10: "",
    codeTextBB_B: "",
    codeTextBB_B_extra_code1: "",
    codeTextBB_B_extra_code2: "",
    codeTextBB_B_extra_code3: "",
    codeTextBB_B_extra_code4: "",
    codeTextBB_B_extra_code5: "",
    codeTextBB_B_extra_code6: "",
    codeTextBB_B_extra_code7: "",
    codeTextBB_B_extra_code8: "",
    codeTextBB_B_extra_code9: "",
    codeTextBB_B_extra_code10: "",
    codeTextBC_B: "",
    codeTextBC_B_extra_code1: "",
    codeTextBC_B_extra_code2: "",
    codeTextBC_B_extra_code3: "",
    codeTextBC_B_extra_code4: "",
    codeTextBC_B_extra_code5: "",
    codeTextBC_B_extra_code6: "",
    codeTextBC_B_extra_code7: "",
    codeTextBC_B_extra_code8: "",
    codeTextBC_B_extra_code9: "",
    codeTextBC_B_extra_code10: "",
    externalLinksA: [
      "React Testing Library",
      "https://testing-library.com/docs/react-testing-library/intro/",
    ],
    externalLinksB: ["Testing Playground", "https://testing-playground.com/"],
    externalLinksC: ["Jest-dom", "https://github.com/testing-library/jest-dom"],
    externalLinksD: ["Mock Functions", "https://jestjs.io/docs/mock-functions"],
  },
];

// const obejectMuster =  {  _id: number,
// link: "test",
// title: "test",
// intro: "test",
// moreIntro: "testmoreIntro",
// codeA: "testCodeA",
// codeA_extra_code1: "",
// codeA_extra_code2: "",
// codeA_extra_code3: "",
// codeA_extra_code4: "",
// codeA_extra_code5: "",
// codeA_extra_code6: "",
// codeA_extra_code7: "",
// codeA_extra_code8: "",
// codeA_extra_code9: "",
// codeA_extra_code10: "",
// codeB: "testCodeB",
// codeB_extra_code1: "",
// codeB_extra_code2: "",
// codeB_extra_code3: "",
// codeB_extra_code4: "",
// codeB_extra_code5: "",
// codeB_extra_code6: "",
// codeB_extra_code7: "",
// codeB_extra_code8: "",
// codeB_extra_code9: "",
// codeB_extra_code10: "",
// codeC: "testCodeC",
// codeC_extra_code1: "",
// codeC_extra_code2: "",
// codeC_extra_code3: "",
// codeC_extra_code4: "",
// codeC_extra_code5: "",
// codeC_extra_code6: "",
// codeC_extra_code7: "",
// codeC_extra_code8: "",
// codeC_extra_code9: "",
// codeC_extra_code10: "",
// subtitle: "testSubtitle",
// subIntro: "testsubIntro",
// moreSubIntro: "testmoreSubIntro",
// codeSubA: "testcodeSubA",
// codeSubA_extra_code1: "",
// codeSubA_extra_code2: "",
// codeSubA_extra_code3: "",
// codeSubA_extra_code4: "",
// codeSubA_extra_code5: "",
// codeSubA_extra_code6: "",
// codeSubA_extra_code7: "",
// codeSubA_extra_code8: "",
// codeSubA_extra_code9: "",
// codeSubA_extra_code10: "",
// codeSubB: "testcodeSubB",
// codeSubB_extra_code1: "",
// codeSubB_extra_code2: "",
// codeSubB_extra_code3: "",
// codeSubB_extra_code4: "",
// codeSubB_extra_code5: "",
// codeSubB_extra_code6: "",
// codeSubB_extra_code7: "",
// codeSubB_extra_code8: "",
// codeSubB_extra_code9: "",
// codeSubB_extra_code10: "",
// codeSubC: "testcodeSubC",
// codeSubC_extra_code1: "",
// codeSubC_extra_code2: "",
// codeSubC_extra_code3: "",
// codeSubC_extra_code4: "",
// codeSubC_extra_code5: "",
// codeSubC_extra_code6: "",
// codeSubC_extra_code7: "",
// codeSubC_extra_code8: "",
// codeSubC_extra_code9: "",
// codeSubC_extra_code10: "",
// textA: "testTextA",
// codeTextAA: "testcodeTextAA",
// codeTextAA_extra_code1: "",
// codeTextAA_extra_code2: "",
// codeTextAA_extra_code3: "",
// codeTextAA_extra_code4: "",
// codeTextAA_extra_code5: "",
// codeTextAA_extra_code6: "",
// codeTextAA_extra_code7: "",
// codeTextAA_extra_code8: "",
// codeTextAA_extra_code9: "",
// codeTextAA_extra_code10: "",
// codeTextAB: "testcodeTextAB",
// codeTextAB_extra_code1: "",
// codeTextAB_extra_code2: "",
// codeTextAB_extra_code3: "",
// codeTextAB_extra_code4: "",
// codeTextAB_extra_code5: "",
// codeTextAB_extra_code6: "",
// codeTextAB_extra_code7: "",
// codeTextAB_extra_code8: "",
// codeTextAB_extra_code9: "",
// codeTextAB_extra_code10: "",
// codeTextAC: "testcodeTextAC",
// codeTextAC_extra_code1: "",
// codeTextAC_extra_code2: "",
// codeTextAC_extra_code3: "",
// codeTextAC_extra_code4: "",
// codeTextAC_extra_code5: "",
// codeTextAC_extra_code6: "",
// codeTextAC_extra_code7: "",
// codeTextAC_extra_code8: "",
// codeTextAC_extra_code9: "",
// codeTextAC_extra_code10: "",
// textB: "testtextB",
// codeTextBA: "testcodeTextBA",
// codeTextBA_extra_code1: "",
// codeTextBA_extra_code2: "",
// codeTextBA_extra_code3: "",
// codeTextBA_extra_code4: "",
// codeTextBA_extra_code5: "",
// codeTextBA_extra_code6: "",
// codeTextBA_extra_code7: "",
// codeTextBA_extra_code8: "",
// codeTextBA_extra_code9: "",
// codeTextBA_extra_code10: "",
// codeTextBB: "testcodeTextBB",
// codeTextBB_extra_code1: "",
// codeTextBB_extra_code2: "",
// codeTextBB_extra_code3: "",
// codeTextBB_extra_code4: "",
// codeTextBB_extra_code5: "",
// codeTextBB_extra_code6: "",
// codeTextBB_extra_code7: "",
// codeTextBB_extra_code8: "",
// codeTextBB_extra_code9: "",
// codeTextBB_extra_code10: "",
// codeTextBC: "testcodeTextBC",
// codeTextBC_extra_code1: "",
// codeTextBC_extra_code2: "",
// codeTextBC_extra_code3: "",
// codeTextBC_extra_code4: "",
// codeTextBC_extra_code5: "",
// codeTextBC_extra_code6: "",
// codeTextBC_extra_code7: "",
// codeTextBC_extra_code8: "",
// codeTextBC_extra_code9: "",
// codeTextBC_extra_code10: "",
// subtitle_A: "",
// subIntro_A: "testsubIntro",
// moreSubIntro_A: "testmoreSubIntro",
// codeSubA_A: "testcodeSubA",
// codeSubA_A_extra_code1: "",
// codeSubA_A_extra_code2: "",
// codeSubA_A_extra_code3: "",
// codeSubA_A_extra_code4: "",
// codeSubA_A_extra_code5: "",
// codeSubA_A_extra_code6: "",
// codeSubA_A_extra_code7: "",
// codeSubA_A_extra_code8: "",
// codeSubA_A_extra_code9: "",
// codeSubA_A_extra_code10: "",
// codeSubB_A: "testcodeSubB",
// codeSubB_A_extra_code1: "",
// codeSubB_A_extra_code2: "",
// codeSubB_A_extra_code3: "",
// codeSubB_A_extra_code4: "",
// codeSubB_A_extra_code5: "",
// codeSubB_A_extra_code6: "",
// codeSubB_A_extra_code7: "",
// codeSubB_A_extra_code8: "",
// codeSubB_A_extra_code9: "",
// codeSubB_A_extra_code10: "",
// codeSubC_A: "testcodeSubC",
// codeSubC_A_extra_code1: "",
// codeSubC_A_extra_code2: "",
// codeSubC_A_extra_code3: "",
// codeSubC_A_extra_code4: "",
// codeSubC_A_extra_code5: "",
// codeSubC_A_extra_code6: "",
// codeSubC_A_extra_code7: "",
// codeSubC_A_extra_code8: "",
// codeSubC_A_extra_code9: "",
// codeSubC_A_extra_code10: "",
// textA_A: "testTextA",
// codeTextAA_A: "testcodeTextAA",
// codeTextAA_A_extra_code1: "",
// codeTextAA_A_extra_code2: "",
// codeTextAA_A_extra_code3: "",
// codeTextAA_A_extra_code4: "",
// codeTextAA_A_extra_code5: "",
// codeTextAA_A_extra_code6: "",
// codeTextAA_A_extra_code7: "",
// codeTextAA_A_extra_code8: "",
// codeTextAA_A_extra_code9: "",
// codeTextAA_A_extra_code10: "",
// codeTextAB_A: "testcodeTextAB",
// codeTextAB_A_extra_code1: "",
// codeTextAB_A_extra_code2: "",
// codeTextAB_A_extra_code3: "",
// codeTextAB_A_extra_code4: "",
// codeTextAB_A_extra_code5: "",
// codeTextAB_A_extra_code6: "",
// codeTextAB_A_extra_code7: "",
// codeTextAB_A_extra_code8: "",
// codeTextAB_A_extra_code9: "",
// codeTextAB_A_extra_code10: "",
// codeTextAC_A: "testcodeTextAC",
// codeTextAC_A_extra_code1: "",
// codeTextAC_A_extra_code2: "",
// codeTextAC_A_extra_code3: "",
// codeTextAC_A_extra_code4: "",
// codeTextAC_A_extra_code5: "",
// codeTextAC_A_extra_code6: "",
// codeTextAC_A_extra_code7: "",
// codeTextAC_A_extra_code8: "",
// codeTextAC_A_extra_code9: "",
// codeTextAC_A_extra_code10: "",
// textB_A: "testtextB",
// codeTextBA_A: "testcodeTextBA",
// codeTextBA_A_extra_code1: "",
// codeTextBA_A_extra_code2: "",
// codeTextBA_A_extra_code3: "",
// codeTextBA_A_extra_code4: "",
// codeTextBA_A_extra_code5: "",
// codeTextBA_A_extra_code6: "",
// codeTextBA_A_extra_code7: "",
// codeTextBA_A_extra_code8: "",
// codeTextBA_A_extra_code9: "",
// codeTextBA_A_extra_code10: "",
// codeTextBB_A: "testcodeTextBB",
// codeTextBB_A_extra_code1: "",
// codeTextBB_A_extra_code2: "",
// codeTextBB_A_extra_code3: "",
// codeTextBB_A_extra_code4: "",
// codeTextBB_A_extra_code5: "",
// codeTextBB_A_extra_code6: "",
// codeTextBB_A_extra_code7: "",
// codeTextBB_A_extra_code8: "",
// codeTextBB_A_extra_code9: "",
// codeTextBB_A_extra_code10: "",
// codeTextBC_A: "testcodeTextBC",
// codeTextBC_A_extra_code1: "",
// codeTextBC_A_extra_code2: "",
// codeTextBC_A_extra_code3: "",
// codeTextBC_A_extra_code4: "",
// codeTextBC_A_extra_code5: "",
// codeTextBC_A_extra_code6: "",
// codeTextBC_A_extra_code7: "",
// codeTextBC_A_extra_code8: "",
// codeTextBC_A_extra_code9: "",
// codeTextBC_A_extra_code10: "",
// subtitle_B: "",
// subIntro_B: "testsubIntro",
// moreSubIntro_B: "testmoreSubIntro",
// codeSubA_B: "testcodeSubA",
// codeSubA_B_extra_code1: "",
// codeSubA_B_extra_code2: "",
// codeSubA_B_extra_code3: "",
// codeSubA_B_extra_code4: "",
// codeSubA_B_extra_code5: "",
// codeSubA_B_extra_code6: "",
// codeSubA_B_extra_code7: "",
// codeSubA_B_extra_code8: "",
// codeSubA_B_extra_code9: "",
// codeSubA_B_extra_code10: "",
// codeSubB_B: "testcodeSubB",
// codeSubB_B_extra_code1: "",
// codeSubB_B_extra_code2: "",
// codeSubB_B_extra_code3: "",
// codeSubB_B_extra_code4: "",
// codeSubB_B_extra_code5: "",
// codeSubB_B_extra_code6: "",
// codeSubB_B_extra_code7: "",
// codeSubB_B_extra_code8: "",
// codeSubB_B_extra_code9: "",
// codeSubB_B_extra_code10: "",
// codeSubC_B: "testcodeSubC",
// codeSubC_B_extra_code1: "",
// codeSubC_B_extra_code2: "",
// codeSubC_B_extra_code3: "",
// codeSubC_B_extra_code4: "",
// codeSubC_B_extra_code5: "",
// codeSubC_B_extra_code6: "",
// codeSubC_B_extra_code7: "",
// codeSubC_B_extra_code8: "",
// codeSubC_B_extra_code9: "",
// codeSubC_B_extra_code10: "",
// textA_B: "testTextA",
// codeTextAA_B: "testcodeTextAA",
// codeTextAA_B_extra_code1: "",
// codeTextAA_B_extra_code2: "",
// codeTextAA_B_extra_code3: "",
// codeTextAA_B_extra_code4: "",
// codeTextAA_B_extra_code5: "",
// codeTextAA_B_extra_code6: "",
// codeTextAA_B_extra_code7: "",
// codeTextAA_B_extra_code8: "",
// codeTextAA_B_extra_code9: "",
// codeTextAA_B_extra_code10: "",
// codeTextAB_B: "testcodeTextAB",
// codeTextAB_B_extra_code1: "",
// codeTextAB_B_extra_code2: "",
// codeTextAB_B_extra_code3: "",
// codeTextAB_B_extra_code4: "",
// codeTextAB_B_extra_code5: "",
// codeTextAB_B_extra_code6: "",
// codeTextAB_B_extra_code7: "",
// codeTextAB_B_extra_code8: "",
// codeTextAB_B_extra_code9: "",
// codeTextAB_B_extra_code10: "",
// codeTextAC_B: "testcodeTextAC",
// codeTextAC_B_extra_code1: "",
// codeTextAC_B_extra_code2: "",
// codeTextAC_B_extra_code3: "",
// codeTextAC_B_extra_code4: "",
// codeTextAC_B_extra_code5: "",
// codeTextAC_B_extra_code6: "",
// codeTextAC_B_extra_code7: "",
// codeTextAC_B_extra_code8: "",
// codeTextAC_B_extra_code9: "",
// codeTextAC_B_extra_code10: "",
// textB_B: "testtextB",
// codeTextBA_B: "testcodeTextBA",
// codeTextBA_B_extra_code1: "",
// codeTextBA_B_extra_code2: "",
// codeTextBA_B_extra_code3: "",
// codeTextBA_B_extra_code4: "",
// codeTextBA_B_extra_code5: "",
// codeTextBA_B_extra_code6: "",
// codeTextBA_B_extra_code7: "",
// codeTextBA_B_extra_code8: "",
// codeTextBA_B_extra_code9: "",
// codeTextBA_B_extra_code10: "",
// codeTextBB_B: "testcodeTextBB",
// codeTextBB_B_extra_code1: "",
// codeTextBB_B_extra_code2: "",
// codeTextBB_B_extra_code3: "",
// codeTextBB_B_extra_code4: "",
// codeTextBB_B_extra_code5: "",
// codeTextBB_B_extra_code6: "",
// codeTextBB_B_extra_code7: "",
// codeTextBB_B_extra_code8: "",
// codeTextBB_B_extra_code9: "",
// codeTextBB_B_extra_code10: "",
// codeTextBC_B: "testcodeTextBC",
// codeTextBC_B_extra_code1: "",
// codeTextBC_B_extra_code2: "",
// codeTextBC_B_extra_code3: "",
// codeTextBC_B_extra_code4: "",
// codeTextBC_B_extra_code5: "",
// codeTextBC_B_extra_code6: "",
// codeTextBC_B_extra_code7: "",
// codeTextBC_B_extra_code8: "",
// codeTextBC_B_extra_code9: "",
// codeTextBC_B_extra_code10: "",
// }

// {
//   _id: 5,
//   link: "arrays",
//   title: "Arrays",
//   intro: "testIntro",
//   moreIntro: "testmoreIntro",
//   codeA: "testCodeA",
//   codeA_extra_code1: "",
//   codeA_extra_code2: "",
//   codeA_extra_code3: "",
//   codeA_extra_code4: "",
//   codeA_extra_code5: "",
//   codeA_extra_code6: "",
//   codeA_extra_code7: "",
//   codeA_extra_code8: "",
//   codeA_extra_code9: "",
//   codeA_extra_code10: "",
//   codeB: "testCodeB",
//   codeB_extra_code1: "",
//   codeB_extra_code2: "",
//   codeB_extra_code3: "",
//   codeB_extra_code4: "",
//   codeB_extra_code5: "",
//   codeB_extra_code6: "",
//   codeB_extra_code7: "",
//   codeB_extra_code8: "",
//   codeB_extra_code9: "",
//   codeB_extra_code10: "",
//   codeC: "testCodeC",
//   codeC_extra_code1: "",
//   codeC_extra_code2: "",
//   codeC_extra_code3: "",
//   codeC_extra_code4: "",
//   codeC_extra_code5: "",
//   codeC_extra_code6: "",
//   codeC_extra_code7: "",
//   codeC_extra_code8: "",
//   codeC_extra_code9: "",
//   codeC_extra_code10: "",
//   subtitle: "testSubtitle",
//   subIntro: "testsubIntro",
//   moreSubIntro: "testmoreSubIntro",
//   codeSubA: "testcodeSubA",
//   codeSubA_extra_code1: "",
//   codeSubA_extra_code2: "",
//   codeSubA_extra_code3: "",
//   codeSubA_extra_code4: "",
//   codeSubA_extra_code5: "",
//   codeSubA_extra_code6: "",
//   codeSubA_extra_code7: "",
//   codeSubA_extra_code8: "",
//   codeSubA_extra_code9: "",
//   codeSubA_extra_code10: "",
//   codeSubB: "testcodeSubB",
//   codeSubB_extra_code1: "",
//   codeSubB_extra_code2: "",
//   codeSubB_extra_code3: "",
//   codeSubB_extra_code4: "",
//   codeSubB_extra_code5: "",
//   codeSubB_extra_code6: "",
//   codeSubB_extra_code7: "",
//   codeSubB_extra_code8: "",
//   codeSubB_extra_code9: "",
//   codeSubB_extra_code10: "",
//   codeSubC: "testcodeSubC",
//   codeSubC_extra_code1: "",
//   codeSubC_extra_code2: "",
//   codeSubC_extra_code3: "",
//   codeSubC_extra_code4: "",
//   codeSubC_extra_code5: "",
//   codeSubC_extra_code6: "",
//   codeSubC_extra_code7: "",
//   codeSubC_extra_code8: "",
//   codeSubC_extra_code9: "",
//   codeSubC_extra_code10: "",
//   textA: "testTextA",
//   codeTextAA: "testcodeTextAA",
//   codeTextAA_extra_code1: "",
//   codeTextAA_extra_code2: "",
//   codeTextAA_extra_code3: "",
//   codeTextAA_extra_code4: "",
//   codeTextAA_extra_code5: "",
//   codeTextAA_extra_code6: "",
//   codeTextAA_extra_code7: "",
//   codeTextAA_extra_code8: "",
//   codeTextAA_extra_code9: "",
//   codeTextAA_extra_code10: "",
//   codeTextAB: "testcodeTextAB",
//   codeTextAB_extra_code1: "",
//   codeTextAB_extra_code2: "",
//   codeTextAB_extra_code3: "",
//   codeTextAB_extra_code4: "",
//   codeTextAB_extra_code5: "",
//   codeTextAB_extra_code6: "",
//   codeTextAB_extra_code7: "",
//   codeTextAB_extra_code8: "",
//   codeTextAB_extra_code9: "",
//   codeTextAB_extra_code10: "",
//   codeTextAC: "testcodeTextAC",
//   codeTextAC_extra_code1: "",
//   codeTextAC_extra_code2: "",
//   codeTextAC_extra_code3: "",
//   codeTextAC_extra_code4: "",
//   codeTextAC_extra_code5: "",
//   codeTextAC_extra_code6: "",
//   codeTextAC_extra_code7: "",
//   codeTextAC_extra_code8: "",
//   codeTextAC_extra_code9: "",
//   codeTextAC_extra_code10: "",
//   textB: "testtextB",
//   codeTextBA: "testcodeTextBA",
//   codeTextBA_extra_code1: "",
//   codeTextBA_extra_code2: "",
//   codeTextBA_extra_code3: "",
//   codeTextBA_extra_code4: "",
//   codeTextBA_extra_code5: "",
//   codeTextBA_extra_code6: "",
//   codeTextBA_extra_code7: "",
//   codeTextBA_extra_code8: "",
//   codeTextBA_extra_code9: "",
//   codeTextBA_extra_code10: "",
//   codeTextBB: "testcodeTextBB",
//   codeTextBB_extra_code1: "",
//   codeTextBB_extra_code2: "",
//   codeTextBB_extra_code3: "",
//   codeTextBB_extra_code4: "",
//   codeTextBB_extra_code5: "",
//   codeTextBB_extra_code6: "",
//   codeTextBB_extra_code7: "",
//   codeTextBB_extra_code8: "",
//   codeTextBB_extra_code9: "",
//   codeTextBB_extra_code10: "",
//   codeTextBC: "testcodeTextBC",
//   codeTextBC_extra_code1: "",
//   codeTextBC_extra_code2: "",
//   codeTextBC_extra_code3: "",
//   codeTextBC_extra_code4: "",
//   codeTextBC_extra_code5: "",
//   codeTextBC_extra_code6: "",
//   codeTextBC_extra_code7: "",
//   codeTextBC_extra_code8: "",
//   codeTextBC_extra_code9: "",
//   codeTextBC_extra_code10: "",
//   subtitle_A: "",
//   subIntro_A: "testsubIntro",
//   moreSubIntro_A: "testmoreSubIntro",
//   codeSubA_A: "testcodeSubA",
//   codeSubA_A_extra_code1: "",
//   codeSubA_A_extra_code2: "",
//   codeSubA_A_extra_code3: "",
//   codeSubA_A_extra_code4: "",
//   codeSubA_A_extra_code5: "",
//   codeSubA_A_extra_code6: "",
//   codeSubA_A_extra_code7: "",
//   codeSubA_A_extra_code8: "",
//   codeSubA_A_extra_code9: "",
//   codeSubA_A_extra_code10: "",
//   codeSubB_A: "testcodeSubB",
//   codeSubB_A_extra_code1: "",
//   codeSubB_A_extra_code2: "",
//   codeSubB_A_extra_code3: "",
//   codeSubB_A_extra_code4: "",
//   codeSubB_A_extra_code5: "",
//   codeSubB_A_extra_code6: "",
//   codeSubB_A_extra_code7: "",
//   codeSubB_A_extra_code8: "",
//   codeSubB_A_extra_code9: "",
//   codeSubB_A_extra_code10: "",
//   codeSubC_A: "testcodeSubC",
//   codeSubC_A_extra_code1: "",
//   codeSubC_A_extra_code2: "",
//   codeSubC_A_extra_code3: "",
//   codeSubC_A_extra_code4: "",
//   codeSubC_A_extra_code5: "",
//   codeSubC_A_extra_code6: "",
//   codeSubC_A_extra_code7: "",
//   codeSubC_A_extra_code8: "",
//   codeSubC_A_extra_code9: "",
//   codeSubC_A_extra_code10: "",
//   textA_A: "testTextA",
//   codeTextAA_A: "testcodeTextAA",
//   codeTextAA_A_extra_code1: "",
//   codeTextAA_A_extra_code2: "",
//   codeTextAA_A_extra_code3: "",
//   codeTextAA_A_extra_code4: "",
//   codeTextAA_A_extra_code5: "",
//   codeTextAA_A_extra_code6: "",
//   codeTextAA_A_extra_code7: "",
//   codeTextAA_A_extra_code8: "",
//   codeTextAA_A_extra_code9: "",
//   codeTextAA_A_extra_code10: "",
//   codeTextAB_A: "testcodeTextAB",
//   codeTextAB_A_extra_code1: "",
//   codeTextAB_A_extra_code2: "",
//   codeTextAB_A_extra_code3: "",
//   codeTextAB_A_extra_code4: "",
//   codeTextAB_A_extra_code5: "",
//   codeTextAB_A_extra_code6: "",
//   codeTextAB_A_extra_code7: "",
//   codeTextAB_A_extra_code8: "",
//   codeTextAB_A_extra_code9: "",
//   codeTextAB_A_extra_code10: "",
//   codeTextAC_A: "testcodeTextAC",
//   codeTextAC_A_extra_code1: "",
//   codeTextAC_A_extra_code2: "",
//   codeTextAC_A_extra_code3: "",
//   codeTextAC_A_extra_code4: "",
//   codeTextAC_A_extra_code5: "",
//   codeTextAC_A_extra_code6: "",
//   codeTextAC_A_extra_code7: "",
//   codeTextAC_A_extra_code8: "",
//   codeTextAC_A_extra_code9: "",
//   codeTextAC_A_extra_code10: "",
//   textB_A: "testtextB",
//   codeTextBA_A: "testcodeTextBA",
//   codeTextBA_A_extra_code1: "",
//   codeTextBA_A_extra_code2: "",
//   codeTextBA_A_extra_code3: "",
//   codeTextBA_A_extra_code4: "",
//   codeTextBA_A_extra_code5: "",
//   codeTextBA_A_extra_code6: "",
//   codeTextBA_A_extra_code7: "",
//   codeTextBA_A_extra_code8: "",
//   codeTextBA_A_extra_code9: "",
//   codeTextBA_A_extra_code10: "",
//   codeTextBB_A: "testcodeTextBB",
//   codeTextBB_A_extra_code1: "",
//   codeTextBB_A_extra_code2: "",
//   codeTextBB_A_extra_code3: "",
//   codeTextBB_A_extra_code4: "",
//   codeTextBB_A_extra_code5: "",
//   codeTextBB_A_extra_code6: "",
//   codeTextBB_A_extra_code7: "",
//   codeTextBB_A_extra_code8: "",
//   codeTextBB_A_extra_code9: "",
//   codeTextBB_A_extra_code10: "",
//   codeTextBC_A: "testcodeTextBC",
//   codeTextBC_A_extra_code1: "",
//   codeTextBC_A_extra_code2: "",
//   codeTextBC_A_extra_code3: "",
//   codeTextBC_A_extra_code4: "",
//   codeTextBC_A_extra_code5: "",
//   codeTextBC_A_extra_code6: "",
//   codeTextBC_A_extra_code7: "",
//   codeTextBC_A_extra_code8: "",
//   codeTextBC_A_extra_code9: "",
//   codeTextBC_A_extra_code10: "",
//   subtitle_B: "",
//   subIntro_B: "testsubIntro",
//   moreSubIntro_B: "testmoreSubIntro",
//   codeSubA_B: "testcodeSubA",
//   codeSubA_B_extra_code1: "",
//   codeSubA_B_extra_code2: "",
//   codeSubA_B_extra_code3: "",
//   codeSubA_B_extra_code4: "",
//   codeSubA_B_extra_code5: "",
//   codeSubA_B_extra_code6: "",
//   codeSubA_B_extra_code7: "",
//   codeSubA_B_extra_code8: "",
//   codeSubA_B_extra_code9: "",
//   codeSubA_B_extra_code10: "",
//   codeSubB_B: "testcodeSubB",
//   codeSubB_B_extra_code1: "",
//   codeSubB_B_extra_code2: "",
//   codeSubB_B_extra_code3: "",
//   codeSubB_B_extra_code4: "",
//   codeSubB_B_extra_code5: "",
//   codeSubB_B_extra_code6: "",
//   codeSubB_B_extra_code7: "",
//   codeSubB_B_extra_code8: "",
//   codeSubB_B_extra_code9: "",
//   codeSubB_B_extra_code10: "",
//   codeSubC_B: "testcodeSubC",
//   codeSubC_B_extra_code1: "",
//   codeSubC_B_extra_code2: "",
//   codeSubC_B_extra_code3: "",
//   codeSubC_B_extra_code4: "",
//   codeSubC_B_extra_code5: "",
//   codeSubC_B_extra_code6: "",
//   codeSubC_B_extra_code7: "",
//   codeSubC_B_extra_code8: "",
//   codeSubC_B_extra_code9: "",
//   codeSubC_B_extra_code10: "",
//   textA_B: "testTextA",
//   codeTextAA_B: "testcodeTextAA",
//   codeTextAA_B_extra_code1: "",
//   codeTextAA_B_extra_code2: "",
//   codeTextAA_B_extra_code3: "",
//   codeTextAA_B_extra_code4: "",
//   codeTextAA_B_extra_code5: "",
//   codeTextAA_B_extra_code6: "",
//   codeTextAA_B_extra_code7: "",
//   codeTextAA_B_extra_code8: "",
//   codeTextAA_B_extra_code9: "",
//   codeTextAA_B_extra_code10: "",
//   codeTextAB_B: "testcodeTextAB",
//   codeTextAB_B_extra_code1: "",
//   codeTextAB_B_extra_code2: "",
//   codeTextAB_B_extra_code3: "",
//   codeTextAB_B_extra_code4: "",
//   codeTextAB_B_extra_code5: "",
//   codeTextAB_B_extra_code6: "",
//   codeTextAB_B_extra_code7: "",
//   codeTextAB_B_extra_code8: "",
//   codeTextAB_B_extra_code9: "",
//   codeTextAB_B_extra_code10: "",
//   codeTextAC_B: "testcodeTextAC",
//   codeTextAC_B_extra_code1: "",
//   codeTextAC_B_extra_code2: "",
//   codeTextAC_B_extra_code3: "",
//   codeTextAC_B_extra_code4: "",
//   codeTextAC_B_extra_code5: "",
//   codeTextAC_B_extra_code6: "",
//   codeTextAC_B_extra_code7: "",
//   codeTextAC_B_extra_code8: "",
//   codeTextAC_B_extra_code9: "",
//   codeTextAC_B_extra_code10: "",
//   textB_B: "testtextB",
//   codeTextBA_B: "testcodeTextBA",
//   codeTextBA_B_extra_code1: "",
//   codeTextBA_B_extra_code2: "",
//   codeTextBA_B_extra_code3: "",
//   codeTextBA_B_extra_code4: "",
//   codeTextBA_B_extra_code5: "",
//   codeTextBA_B_extra_code6: "",
//   codeTextBA_B_extra_code7: "",
//   codeTextBA_B_extra_code8: "",
//   codeTextBA_B_extra_code9: "",
//   codeTextBA_B_extra_code10: "",
//   codeTextBB_B: "testcodeTextBB",
//   codeTextBB_B_extra_code1: "",
//   codeTextBB_B_extra_code2: "",
//   codeTextBB_B_extra_code3: "",
//   codeTextBB_B_extra_code4: "",
//   codeTextBB_B_extra_code5: "",
//   codeTextBB_B_extra_code6: "",
//   codeTextBB_B_extra_code7: "",
//   codeTextBB_B_extra_code8: "",
//   codeTextBB_B_extra_code9: "",
//   codeTextBB_B_extra_code10: "",
//   codeTextBC_B: "testcodeTextBC",
//   codeTextBC_B_extra_code1: "",
//   codeTextBC_B_extra_code2: "",
//   codeTextBC_B_extra_code3: "",
//   codeTextBC_B_extra_code4: "",
//   codeTextBC_B_extra_code5: "",
//   codeTextBC_B_extra_code6: "",
//   codeTextBC_B_extra_code7: "",
//   codeTextBC_B_extra_code8: "",
//   codeTextBC_B_extra_code9: "",
//   codeTextBC_B_extra_code10: "",
// },
